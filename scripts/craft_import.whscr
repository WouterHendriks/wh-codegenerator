<?wh
LOADLIB "wh::os.whlib";
LOADLIB "wh::files.whlib";
LOADLIB "module::publisher/contenttypes.whlib";
LOADLIB "module::publisher/internal/siteprofiles/reader.whlib";
LOADLIB "module::publisher/siteapi.whlib";
LOADLIB "module::system/resources.whlib";
LOADLIB "module::system/database.whlib";
LOADLIB "module::system/whfs.whlib";
LOADLIB "module::codegenerator/siteprofiles.whlib";

STRING jsonpath := "moduledata::codegenerator/sections_lommers.json"; // path to JSON source file
STRING baseurl := "http://www.lommers-lederwaren.nl/"; // used in XML namespaces
STRING sitename := "Lommers Lederwaren"; // used for the 'addfsobjects' option
STRING lib := "lommers_lederwaren.whlib";
STRING lang := "nl"; // "nl", "en"

RECORD args := ParseArguments(GetConsoleArguments(),
                              [[ name := "whlib", type := "switch" ]
                              ,[ name := "siteprl", type := "switch" ]
                              ,[ name := "addfsobjects", type := "switch" ]
                              ,[ name := "help", type := "switch" ]
                              ]);

IF (args.help)
{
  PRINT("Syntax: runscript craft_import.whscr [ --whlib ] [ --siteprl ] [ --addfsobjects ]\n");
  RETURN;
}

STRING defaultboxname := lang = "nl" ? "Instellingen" : "Settings";

BLOB craftjson := GetWebhareResource(jsonpath);
RECORD jsondata := DecodeJSON(BloBToString(craftjson,-1));

// convert Craft fields and sections for WebHare's siteprofile generation function
RECORD ARRAY siteprofilesections := GenerateSiteProfileSectionsData(jsondata); // title, name, filetypes, foldertypes, members

RECORD siteprofileinfo := [ baseurl := baseurl
                          , sections := siteprofilesections
                          ];

// Generate XML output
IF (args.siteprl)
{
  STRING siteprofxml := '<?xml version="1.0" encoding="UTF-8" ?>\n'
                     || '<siteprofile xmlns="http://www.webhare.net/xmlns/publisher/siteprofile"\n'
                     || '             xmlns:t="http://www.webhare.net/xmlns/tollium/screens"\n'
                     || '             xmlns:m="http://www.webhare.net/xmlns/system/moduledefinition"\n'
                     || '             xmlns:p="http://www.webhare.net/xmlns/publisher/components"\n'
                     || '             xmlns:w="http://www.webhare.net/xmlns/wrd/components">\n\n';

  FOREVERY (RECORD section FROM siteprofilesections)
  {
    siteprofxml := siteprofxml || GenerateSiteprofile(baseurl, section);
  }

  siteprofxml := siteprofxml || "</siteprofile>\n";

  print(siteprofxml);
}

IF (args.addfsobjects)
{
  OBJECT trans := OpenPrimary();
  trans->BeginWork();

  FOREVERY (RECORD section FROM siteprofilesections)
    AddFilesAndFolders(section);

  RECORD ARRAY errors := trans->CommitWork();
  IF (Length(errors) > 0)
    Abort("There were errors in AddFilesAndFolders: " || AnyToString(errors,'tree'));
}

PUBLIC MACRO AddFilesAndFolders(RECORD section)
{
  OBJECT site := OpenSiteByName(sitename);
  OBJECT root := site->OpenByPath("");

  IF (Length(section.foldertypes) > 0)
  {
    FOREVERY (RECORD foldertype FROM section.foldertypes)
    {
      STRING xmlns := siteprofileinfo.baseurl || 'xmlns/foldertype/' || GetSiteProfileXMLName(section.name) || "s";
      OBJECT whfstype := OpenWHFSType(xmlns);
      IF (NOT ObjectExists(whfstype))
        Abort("Could not locate site profile folder type '" || xmlns || "'");

      RECORD newfolder := [ name := foldertype.name
                          , title := foldertype.title
                          , type := OpenWHFSType(xmlns)->id
                          ];

      IF (RecordExists(SELECT FROM system.fs_objects WHERE parent = root->id AND ToUpperCase(name) = ToUpperCase(newfolder.name)))
        CONTINUE;

      root->CreateFolder(newfolder);
    }
  }
  ELSE
  {
    FOREVERY (RECORD filetype FROM section.filetypes)
    {
      STRING xmlns := siteprofileinfo.baseurl || 'xmlns/filetype/' || GetSiteProfileXMLName(section.name);
      OBJECT whfstype := OpenWHFSType(xmlns);
      IF (NOT ObjectExists(whfstype))
        Abort("Could not locate site profile file type '" || xmlns || "'");

      RECORD newfile := [ name := filetype.name
                        , title := filetype.title
                        , type := OpenWHFSType(xmlns)->id
                        , publish := TRUE
                        ];

      IF (RecordExists(SELECT FROM system.fs_objects WHERE parent = root->id AND ToUpperCase(name) = ToUpperCase(newfile.name)))
        CONTINUE;

      root->CreateFile(newfile);
    }
  }
}

//********************************************************************************
//
// Functions for creating the XML based on a data record containing the following cells:
//
// title, name, filetypes, foldertypes, members
//

//********************************************************************************
//
// CMS specific functions
//
// using https://github.com/xodigital/ArtVandelay, version 2.0.0a, for the (fields and structures) JSON
//
RECORD ARRAY FUNCTION GenerateSiteProfileSectionsData(RECORD jsondata)
{
    // first collect all Craft fields
    RECORD ARRAY allcraftfields;

    FOREVERY (RECORD fieldcategory FROM UnpackRecord(jsondata.fields))
    {
        FOREVERY (RECORD cat_unpacked FROM UnpackRecord(fieldcategory.value))
        {
            INSERT [ name := cat_unpacked.name
                   , title := cat_unpacked.value.name
                   , type := cat_unpacked.value.type
                   , settings := cat_unpacked.value.settings
                   , instructions := cat_unpacked.value.instructions
                   , blocktypes := CellExists(cat_unpacked.value, "blocktypes") ? UnpackRecord(cat_unpacked.value.blocktypes) : DEFAULT RECORD ARRAY
                   ] INTO allcraftfields AT END;
        }
    }

    // now generate an array suitable for siteprofile generation
    RECORD ARRAY siteprofilesections;
    FOREVERY (RECORD sectiondata FROM UnpackRecord(jsondata.sections))
    {
        RECORD section := sectiondata.value;

        RECORD ARRAY craftfields := GetCraftFieldsByEntryTypes(UnpackRecord(section.entryTypes), allcraftfields);

        RECORD ARRAY filetypes, foldertypes;
        SWITCH (ToUpperCase(sectiondata.value.type))
        {
            CASE "SINGLE" // in WebHare terms: a file with meta data
            {
                INSERT [ title := section.name
                       , name := GetSiteProfileXMLName(section.name)
                       ] INTO filetypes AT END;
            }
            CASE "CHANNEL" // in WebHare terms: a folder with files, where the files have meta data
               , "STRUCTURE" // in WebHare terms: a folder tree, no files; meta data for the folders
                             // ADDME: (in Craft these folders can be different types, support that!)
            {
                INSERT [ title := section.name
                       , name := GetSiteProfileXMLName(section.name)
                       ] INTO filetypes AT END;

                INSERT [ title := section.name
                       , name := GetSiteProfileXMLName(section.name)
                       ] INTO foldertypes AT END;
            }
            DEFAULT
            {
                Abort("Unknown Craft section type '" || sectiondata.value.type || "'");
            }
        }

        RECORD ARRAY members := ConvertFieldsToMembers(craftfields);

        INSERT [ title := section.name
               , name := GetSiteProfileXMLName(section.name)
               , filetypes := filetypes
               , foldertypes := foldertypes
               , members := members
               , lib := lib
               ] INTO siteprofilesections AT END;
    }

    RETURN siteprofilesections;
}

RECORD ARRAY FUNCTION GetCraftFieldsByEntryTypes(RECORD ARRAY entrytypes, RECORD ARRAY allcraftfields)
{
    /* each section has a cell 'entryTypes', which contains the fields

       the tree is as follows:

        entryTypes: {
            about_index: {                            <------- Some name, we don't care
                name: "About index",
                hasTitleField: 1,
                titleLabel: "Page title",
                titleFormat: null,
                fieldLayout: {
                    tabs: {
                    About Page: {
                        pageTitle: 1,                 <------- Find these specific fields in the main 'fields' record
                        pageDescription: 1,
                        aboutTextColor: 0,
                        aboutBackgroundColor: 0,
                        image: 1,
                        aboutContent: 0
                    },
                    SEO: {
                        pageMetaKeywords: 0,
                        pageMetaDescription: 0
                    }
                }
            }
        }
    */

    RECORD ARRAY craftfields;

    FOREVERY (RECORD entrytype FROM entrytypes)
    {
        RECORD ARRAY tabs;
        IF (CellExists(entrytype.value.fieldlayout, "tabs"))
        {
            tabs := UnpackRecord(entrytype.value.fieldlayout.tabs);
        }
        ELSE
        {
            //abort(entrytype.value,'tree');
        }

        FOREVERY (RECORD tab FROM tabs)
        {
          IF (TypeID(tab.value) = TypeID(VARIANT ARRAY))
            CONTINUE;

            RECORD ARRAY fields := UnpackRecord(tab.value);
            FOREVERY (RECORD field FROM fields)
            {
                RECORD craftfield := SELECT * FROM allcraftfields WHERE ToUpperCase(name) = ToUpperCase(field.name);
                IF (RecordExists(craftfield))
                {
                    IF (ToUpperCase(craftfield.name) IN ["PAGETITLE"])
                    {
                        CONTINUE;
                    }

                    INSERT craftfield INTO craftfields AT END;
                }
                ELSE
                {
                    Abort("No such craftfield '" || field.name || "'");
                }
            }
        }
    }

    RETURN craftfields;
}

RECORD ARRAY FUNCTION ConvertFieldsToMembers(RECORD ARRAY fields)
{
    RECORD ARRAY members;
    FOREVERY (RECORD field FROM fields)
    {
        RECORD curmember := [ name := field.name
                            , title := CellExists(field, "title") ? field.title : field.name
                            , type := ""
                            , required := CellExists(field, "required") AND field.required = 1
                            , comments := ""
                            , members := DEFAULT RECORD ARRAY
                            , options := DEFAULT RECORD ARRAY
                            , settings := DEFAULT RECORD
                            ];

        IF (NOT CellExists(field,"type"))
        {
            Abort("No column 'type' in field: " || AnyToString(field,'tree'));
        }

        SWITCH (ToUpperCase(field.type))
        {
            CASE "COLOR"
            {
                curmember.type := "string";
                curmember.comments := "Color";
                curmember.settings := [ specialtype := "color"
                                      ];
            }
            CASE "PLAINTEXT"
            {
                curmember.type := "string";
            }
            CASE "ASSETS"
            {
                curmember.type := "image";
                curmember.comments := "Image";
                curmember.settings := [ specialtype := "image"
                                      ];
            }
            CASE "RICHTEXT"
            {
                curmember.type := "richdocument";

            }
            CASE "ENTRIES"
            {
                curmember.type := "whfsref";
            }
            CASE "MATRIX"
            {
                RECORD ARRAY blocktypefields := field.blocktypes;
                STRING comments := 'Types: ' || DeTokenize((SELECT AS STRING ARRAY ToLowerCase(blocktypefields.name) FROM blocktypefields), ", ");

                RECORD ARRAY membertypes;

                RECORD ARRAY matrixmembers;
                FOREVERY (RECORD blocktypefield FROM blocktypefields)
                {
                    RECORD ARRAY blocktypemembers;
                    FOREVERY (RECORD fields_unpacked FROM UnpackRecord(blocktypefield.value.fields))
                    {
                        INSERT [ name := fields_unpacked.value.name
                               , type := fields_unpacked.value.type
                               , settings := CellExists(fields_unpacked.value, "settings") ? fields_unpacked.value.settings : DEFAULT RECORD
                               , required := fields_unpacked.value.required
                               ] INTO matrixmembers AT END;

                        INSERT [ name := fields_unpacked.value.name
                               , type := fields_unpacked.value.type
                               , required := fields_unpacked.value.required
                               ]  INTO blocktypemembers AT END;
                    }

                    INSERT [ name := blocktypefield.name
                           , title := blocktypefield.value.name
                           , members := ConvertFieldsToMembers(blocktypemembers)
                           ] INTO membertypes AT END;
                }

                curmember.type := "array";
                curmember.comments := comments;
                curmember.members := ConvertFieldsToMembers(matrixmembers);
                curmember.settings := [ types := membertypes ];
            }
            CASE "DROPDOWN", "RADIOBUTTONS"
            {
                STRING comments;// := 'Options: ' || DeTokenize((SELECT AS STRING ARRAY ToLowerCase(blocktypefields.name) FROM blocktypefields), ", ");
                IF (CellExists(field,"SETTINGS") AND RecordExists(field.settings))
                {
                    curmember.options := SELECT title := label
                                              , value := value
                                              , selected := CellExists(field, "default") AND TypeID(field."default") = TypeId(INTEGER) AND field."default" = 1
                                           FROM field.settings.options;
                }
                ELSE
                {
                    comments := "Could not locate dropdown options for field '" || field.name || "'";
                }

                curmember.type := "string";
                curmember.comments := comments;
                IF (ToUpperCase(field.type) = "DROPDOWN")
                  curmember.settings := [ specialtype := "dropdown" ];
                ELSE
                  curmember.settings := [ specialtype := "radio" ];
            }
            CASE "LIGHTSWITCH"
            {
                curmember.type := "boolean";
            }
            CASE "NUMBER"
            {
                curmember.type := "string";
                curmember.settings := [ specialtype := "integer" ];
            }
            CASE "DATE"
            {
              IF (TypeID(field.settings.showtime) = TypeID(STRING) OR field.settings.showtime = 0)//date
              {
                curmember.type := "date";
                curmember.settings := [ datetype := "date" ];
              }
              ELSE IF (field.settings.showtime = 1) //  date/time
              {
                curmember.type := "datetime";
                curmember.settings := [ datetype := "datetime" ];
              }
              ELSE
              {
                Abort("Unknown date type: " || field.settings.showtime);
              }
            }
            CASE "TABLE", "CATEGORIES", "TAGS" // no idea what to do with these
            {
              curmember.type := field.type;
              curmember.comments := "No idea what to do with: " || field.type;
            }
            DEFAULT
            {
              Abort("Unknown Craft field type '" || field.type || "'. Data: " || AnyToString(field,'tree'));
            }
        }

        INSERT curmember INTO members AT END;
    }

    RETURN members;
}
