<?wh
LOADLIB "wh::files.whlib";

STRING defaultboxname := "Instellingen";
//STRING defaultboxname := lang = "nl" ? "Instellingen" : "Settings";

RECORD screendata;
STRING screenbaseurl;

PUBLIC STRING FUNCTION GenerateSiteprofile(STRING baseurl, RECORD siteprofilesection)
{
  screendata := siteprofilesection;

  IF (Right(baseurl, 1) != "/")
    baseurl := baseurl || "/";

  screenbaseurl := baseurl;

  IF (siteprofilesection.is_prebuilt_page)
  {
    RETURN
`  <apply>
    <to type="all" />
    <prebuiltpage tag="<module>:${siteprofilesection.lib}" type="${siteprofilesection.prebuilt_page_is_static ? 'static' : 'dynamic'}" library="${siteprofilesection.lib}.whlib" webpageobjectname="${siteprofilesection.lib}page" />
  </apply>`;
  }

  STRING o;

  IF (siteprofilesection.add_custom_rtdtype)
  {
    o := o ||
`  <rtdtype namespace="${baseurl}rtd/${siteprofilesection.lib}">
    <css path="../../shared/rtd/rtd.css" />
    <blockstyles defaultstyle="NORMAL">
      <textstyle tag="NORMAL" textstyles="b i a-href sup sub strike" />
    </blockstyles>
  </rtdtype>\n\n`;
  }

  STRING foldertype := RecordExists(siteprofilesection.foldertype) ? screenbaseurl || 'foldertype/' || GetSiteProfileXMLName(siteprofilesection.lib) : "";
  STRING filetype := screenbaseurl || 'filetype/' || GetSiteProfileXMLName(siteprofilesection.lib);

  IF (NOT siteprofilesection.page_only AND RecordExists(siteprofilesection.foldertype))
  {

    o := o ||
`  <!-- ***********************************************************************

       ${CapitalizeFirstChar(siteprofilesection.lib)} folder

  ************************************************************************ -->\n`;

    o := o || '  <contenttype namespace="' || foldertype || '" />\n'
           || '\n'
           || '  <foldertype typedef="' || foldertype || '"\n'
           || '              title="' || EncodeHTML(siteprofilesection.foldertype.title) || '"\n'
           || '              tolliumicon="tollium:folders/projects"\n'
           //|| (NOT siteprofilesection.use_rtd ? '              indexfile="contentlisting"\n' : '')
           || '              protectindexfile="true"\n'
           || '              >\n'
           || '  </foldertype>\n'
           || '\n';

    STRING allowfiletype := siteprofilesection.use_rtd ? "http://www.webhare.net/xmlns/publisher/richdocumentfile" : filetype;
    o := o ||
`  <apply>
    <to type="all" parenttype="${foldertype}" />
    <denyfiletype typedef="*" />
    <denyfoldertype typedef="*" />
    <allowfiletype typedef="${allowfiletype}" />
  </apply>

  <apply>
    <to type="folder" foldertype="${foldertype}" />
    <folderindex indexfile="newfile"
                 newfiletype="${filetype}index"
                 newfilename="index.rtd"
                 protectindexfile="true"
                 />
  </apply>

  <!-- ***********************************************************************

       ${CapitalizeFirstChar(siteprofilesection.lib)} folder index file

  ************************************************************************ -->
  <contenttype namespace="${filetype}index" />

  <filetype typedef="${filetype}index"
            title="${siteprofilesection.foldertype.title}"
            tolliumicon="tollium:files/application_x-webhare-richdocument"
            blobiscontent="false"
            needstemplate="true"
            needsprofile="false"
            ispublishable="true"
            requirescontent="false"
            isacceptableindex="true"
            ispublishedassubdir="true"
            extensions=".rtd"
            />

  <apply>
    <to type="file" filetype="${filetype}index" />
    <setobjecteditor name="publisher:editdocument" />
  </apply>

  <!-- ***********************************************************************

       ${CapitalizeFirstChar(siteprofilesection.lib)} file${siteprofilesection.use_rtd ? ' (RTD)' : ''}

  ************************************************************************ -->\n`;
  }

  // add <contenttye> with <member>s and <propertyeditor>s
  IF (Length(siteprofilesection.members) = 0) // no members, just a <contenttype> then
  {
    o := o || '  <contenttype namespace="' || screenbaseurl || 'filetype/' || GetSiteProfileXMLName(siteprofilesection.lib) || '">\n  </contenttype>\n\n';
  }
  ELSE
  {
    o := o || '  <contenttype namespace="' || screenbaseurl || 'filetype/' || GetSiteProfileXMLName(siteprofilesection.lib) || '">\n';

    RECORD ARRAY members;
    FOREVERY (RECORD mem FROM siteprofilesection.members)
    {
      IF (NOT RecordExists(SELECT FROM members WHERE ToUpperCase(members.name) = ToUpperCase(mem.name)))
      {
        INSERT mem INTO members AT END;
      }
    }

    FOREVERY (RECORD smember FROM members)
    {
      o := o || GetSiteProfileMember(smember, 2);
    }

    o := o || '  </contenttype>\n\n';
  }

  IF (NOT siteprofilesection.use_rtd)
  {
    o := o ||
         '  <filetype typedef="' || screenbaseurl || 'filetype/' || GetSiteProfileXMLName(siteprofilesection.lib) || '"\n'
      || '            title="' || EncodeValue(siteprofilesection.title) || '"\n'
      || '            blobiscontent="false"\n'
      || '            ispublishable="true"\n'
      || '            tolliumicon="tollium:files/text_plain"\n'
      || '            isacceptableindex="false"\n'
      || '            ispublishedassubdir="true"\n'
      || '            needstemplate="true"\n'
      || '            />\n\n';
  }

  IF (Length(siteprofilesection.members) > 0)
  {
    o := o || GetPropertyEditor(siteprofilesection
                              , screenbaseurl
                              , FALSE
                              , [ isembobj := FALSE ])
           || "\n\n"
           || GetApplies(siteprofilesection, screenbaseurl);
  }

  //STRING applyto := siteprofilesection.use_rtd ?
  //IF (siteprofilesection.use_rtd)
  //IF (siteprofilesection.page_only)
  //{
//    o := o ||
//`  <apply>
//    <to type="file" filetype="${filetype}" />
//    <extendproperties extension=".${GetSiteProfileXMLName(siteprofilesection.lib)}" contenttype="${filetype}" />
//`;

//    IF (siteprofilesection.use_rtd)
//      o := o || '    <setobjecteditor name="publisher:editdocument" />\n';

//    o := o ||
//`    <bodyrenderer library="${siteprofilesection.lib}.whlib" objectname="${GetSiteProfileXMLName(siteprofilesection.lib)}page" />
//  </apply>
//`;
  //}
  //ELSE
  //{
    o := o ||
`  <apply>
    ${siteprofilesection.use_rtd
      ? `<to type="file" filetype="http://www.webhare.net/xmlns/publisher/richdocumentfile" parenttype="${foldertype}" />`
      : `<to type="file" filetype="${filetype}" />`}
    <extendproperties extension=".${GetSiteProfileXMLName(siteprofilesection.lib)}" contenttype="${filetype}" />
`;

  IF (siteprofilesection.page_only)
  {
    IF (siteprofilesection.use_rtd)
      o := o || `    <setobjecteditor name="publisher:editdocument" />\n`;
    ELSE
      o := o || `    <setobjecteditor name="publisher:propertydialog" />\n`;

    o := o || `    <bodyrenderer library="${siteprofilesection.lib}.whlib" objectname="${GetSiteProfileXMLName(siteprofilesection.lib)}page" />\n`;
  }

    o := o ||
`  </apply>\n\n`;
  //}

  IF (NOT siteprofilesection.page_only)
  {
    o := o ||
`  <!-- ***********************************************************************

       Body renderer

  *********************************************************************** -->
`;

  o := o ||
`  <apply>
    <to type="file" parenttype="${foldertype}" />
    <bodyrenderer library="${siteprofilesection.lib}.whlib" objectname="${GetSiteProfileXMLName(siteprofilesection.lib)}page" />
  </apply>
`;
  }

  RETURN o;
}

STRING FUNCTION GetSiteProfileMember(RECORD data, INTEGER memberindent)
{
  IF (ToUpperCase(data.type) = "ARRAY")
  {
    STRING xml := '    <member name="' || GetSiteProfileXMLName(data.name) || '" type="array">\n';

    BOOLEAN hasrowtypes := CellExists(data, "settings") AND CellExists(data.settings, "types") AND Length(data.settings.types) > 0;

    IF (hasrowtypes)
      xml := xml || '      <member name="membertype" type="string" />\n';

    RECORD ARRAY childmembers := SELECT *
                                      , name := GetSiteProfileXMLName(name)
                                   FROM data.members;

    childmembers := SELECT childmembers.name
                         , type := Any(childmembers.type)
                         , comments := Any(childmembers.comments)
                      FROM childmembers
                  GROUP BY childmembers.name;

    FOREVERY (RECORD childmember FROM childmembers)
      xml := xml || WS(memberindent) || GetSiteProfileMember(childmember, memberindent);

    xml := xml || "  " || WS(memberindent) || "</member>\n";

    RETURN xml;
  }

  STRING xml := '    <member name="' || GetSiteProfileXMLName(data.name) || '" type="';

  SWITCH (ToUpperCase(data.type))
  {
    CASE "STRING","TEXTAREA"
    {
      xml := xml || 'string"';
    }
    CASE "RICHDOCUMENT","RICHAREA"
    {
      xml := xml || 'richdocument"';
    }
    CASE "FILE","IMAGE"
    {
      xml := xml || 'file"';
    }
    DEFAULT
    {
      xml := xml || data.type || '"';
    }
  }

  xml := xml || ' />';

  IF (data.comments != "")
    xml := xml || ' <!-- ' || data.comments || ' -->';

  RETURN xml || "\n";
}

PUBLIC STRING FUNCTION GetSiteProfileXMLName(STRING txt)
{
  txt := ToLowerCase(GetSafeFileName(txt));
  txt := Substitute(txt, "-", "_");
  RETURN txt;
}

STRING FUNCTION GetPropertyEditor(RECORD data, STRING baseurl, BOOLEAN isembobj, RECORD settings)
{
  settings := ValidateOptions([ isembobj := FALSE], settings);

  STRING xml;

  IF (NOT isembobj)
  {
    xml := xml || '  <tabsextension name="' || GetSiteProfileXMLName(data.lib) || '" xmlns="http://www.webhare.net/xmlns/tollium/screens">\n'
               || '    <newtab title="' || data.title || '">\n';

    xml := xml || AddBoxesToPropertyEditor(data.members, "", settings);
  }


  IF (NOT isembobj)
  {
    xml := xml || '    </newtab>\n'
               || '  </tabsextension>';
  }

  // add screens for array types
  RECORD ARRAY memberarraytypes := SELECT * FROM data.members WHERE type = "array";
  FOREVERY (RECORD memberarraytype FROM memberarraytypes)
  {
    IF (CellExists(memberarraytype, "settings") AND CellExists(memberarraytype.settings, "types") AND Length(memberarraytype.settings.types) >= 1)
    {
      FOREVERY (RECORD arraytype FROM memberarraytype.settings.types)
      {
        xml := xml
            || '\n\n  <screen title="' || memberarraytype.title || '"\n'
            || '              name="edit_' || GetSiteProfileXMLName(memberarraytype.name) || '_' || GetSiteProfileXMLName(arraytype.name) || '" xmlns="http://www.webhare.net/xmlns/tollium/screens" implementation="rowedit">\n'
            || '    <compositions>\n'
            || '      <record name="row" />\n'
            || '    </compositions>\n'
            || '    <body>\n';

        xml := xml || AddBoxesToPropertyEditor(arraytype.members, "row", settings);

        xml := xml
            || '    </body>\n'
            || '    <footer>\n'
            || '      <defaultformbuttons buttons="ok cancel" />\n'
            || '    </footer>\n'
            || '  </screen>';
      }
    }
    ELSE IF (Length(memberarraytype.members) > 0)
    {
      STRING name_singular := MakeSingular(GetSiteProfileXMLName(memberarraytype.name));

      xml := xml
          || '\n\n'
          || '  <screen xmlns="http://www.webhare.net/xmlns/tollium/screens"\n'
          || '          implementation="rowedit"\n'
          || '          name="edit_' || name_singular || '"\n'
          || (screendata.use_tids ? `` : `          title="Bewerk ${memberarraytype.title}"` || "\n")
          || (screendata.use_tids ? '          gid=".' || GetSiteProfileXMLName(memberarraytype.name) || '.edit_' || name_singular || '"\n': "")
          || '          minwidth="500px"\n'
          || '          >\n'
          || '    <compositions>\n'
          || '      <record name="row" />\n'
          || '    </compositions>\n'
          || '    <body>\n';

      xml := xml || AddBoxesToPropertyEditor(memberarraytype.members, "row", settings);

      xml := xml
          || '    </body>\n'
          || '    <footer>\n'
          || '      <defaultformbuttons buttons="ok cancel" />\n'
          || '    </footer>\n'
          || '  </screen>';
    }
  }

  RETURN xml;
}

STRING FUNCTION AddBoxesToPropertyEditor(RECORD ARRAY siteprofmembers, STRING composition_name, RECORD settings)
{
  settings := ValidateOptions([ isembobj := FALSE ], settings);

  RECORD ARRAY boxes := [[ title := defaultboxname
                         , name := ""
                         , members := DEFAULT RECORD ARRAY
                         , owntab := FALSE
                         ]
                        ];

  FOREVERY (RECORD siteprofmember FROM siteprofmembers)
  {
    IF (siteprofmember.type iN ["image","array","richdocument","richarea"]) // own box
      INSERT CELL[ title := siteprofmember.title
                 , name := siteprofmember.name
                 , members := [ siteprofmember ]
                 , owntab := settings.isembobj AND CellExists(siteprofmember, "owntab") AND siteprofmember.owntab
                 ] INTO boxes AT END;
    ELSE // default box
    {
      INSERT CELL[ ...siteprofmember
                 , owntab := settings.isembobj AND CellExists(siteprofmember, "owntab") AND siteprofmember.owntab
                 ] INTO boxes[0].members AT END;
    }
  }

  // for now, if we have any 1 field with a tab, just add tabs to all (we'll group by and reorder later)
  BOOLEAN addtabs := settings.isembobj AND RecordExists(SELECT FROM siteprofmembers WHERE CellExists(siteprofmembers, "owntab") AND owntab);

  STRING xml;
  FOREVERY (RECORD box FROM boxes)
  {
    IF (Length(box.members) > 0)
    {
      STRING tid_title := (screendata.use_tids
                           ? (box.title = defaultboxname ? `tid="~settings"` : `tid=".${box.name}"`)
                           : `title="${box.title}"`);

      STRING whitespace := WS(6);

      IF (addtabs)//settings.isembobj AND box.owntab)
      {
        xml := xml || WS(8) || `<tab title="${box.title}">\n`;
        whitespace := WS(10);
      }

      xml := xml || whitespace || '<heading ' || tid_title || ' />\n';

      FOREVERY (RECORD siteprofmember FROM box.members)
        xml := xml || GetPropertyEditorElement(siteprofmember, composition_name, [ whitespace := whitespace ]) || "\n";

      IF (addtabs)//settings.isembobj AND box.owntab)
        xml := xml || WS(8) || `</tab>\n`;

      if (#box+1 < Length(boxes))
        xml := xml || '\n';
    }
  }

  RETURN xml;
}

STRING FUNCTION GetPropertyEditorElement(RECORD siteprofmember, STRING composition_name, RECORD settings)
{
  settings := ValidateOptions([ whitespace := "" ], settings);

  STRING xml;

  composition_name := composition_name ?? "contentdata";

  IF (NOT CellExists(siteprofmember, "settings"))
    INSERT CELL settings := DEFAULT RECORD INTO siteprofmember;

  STRING errorlabel := screendata.use_tids
                       ? `errorlabeltid=".${siteprofmember.name}"`
                       : `errorlabel="${siteprofmember.title}"`;

  //STRING whitespace := WS(6);

  //IF (settings.isembobj AND siteprofmember.owntab)
  //{
  //  xml := xml || WS(6) || `<tab title="${siteprofmember.title}">\n`;
  //  whitespace := WS(8);
  //}

  SWITCH (siteprofmember.type)
  {
    CASE "string"
    {
      STRING specialtype;
      IF (CellExists(siteprofmember, "settings") AND RecordExists(siteprofmember.settings) AND CellExists(siteprofmember.settings, "specialtype"))
        specialtype := siteprofmember.settings.specialtype;

      IF (specialtype = "color")
      {
        /*
        // FIXME: <coloredit> is pretty useless at the moment, falling back to textedit for now
        // https://gitlab.b-lex.com/webhare/webhare/issues/335
        xml := xml || settings.whitespace
            || '<coloredit composition="' || composition_name || '" '
            || 'cellname="' || GetSiteProfileXMLName(siteprofmember.name) || '" '
            || 'title="' || siteprofmember.title || '" '
            || (siteprofmember.required ? 'required="true" ' : '')
            || '/>';
        */
        xml := xml
            || '      <line>\n'
            || '        <textedit composition="' || composition_name || '" '
            || 'cellname="' || GetSiteProfileXMLName(siteprofmember.name) || '" '
            || (siteprofmember.title != "" ? 'title="' || siteprofmember.title || '" ' : '')
            || (siteprofmember.required ? 'required="true" ' : '')
            || 'width="10x" '
            || '/>\n'
            || '        <text title="" value="(#cc00ff)" />\n'
            || '      </line>';
      }
      ELSE
      {
        xml := xml || settings.whitespace
            || '<textedit composition="' || composition_name || '" '
            || 'cellname="' || GetSiteProfileXMLName(siteprofmember.name) || '" '
            || (siteprofmember.title != "" ? 'title="' || siteprofmember.title  || '" ' : '');

        IF (specialtype = "integer")
          xml := xml || 'valuetype="integer" ';

        xml := xml
            || (siteprofmember.required ? 'required="true" ' : '')
            || 'width="1pr" '
            || '/>';
      }
    }
    CASE "textarea"
    {
      xml := xml || settings.whitespace
          || '<textarea composition="' || composition_name || '" '
          || 'cellname="' || GetSiteProfileXMLName(siteprofmember.name) || '" '
          || (siteprofmember.title != "" ? 'title="' || siteprofmember.title || '" ' : "")
          || 'width="1pr" '
          || 'height="3x" '
          || (siteprofmember.required ? 'required="true" ' : '')
          || '/>';
    }
    CASE "richdocument"
    {
        xml := xml
            || settings.whitespace || '<richdocument composition="' || composition_name || '"\n'
            || settings.whitespace || '              cellname="' || GetSiteProfileXMLName(siteprofmember.name) || '"\n'
            || settings.whitespace || '              height="1pr"\n'
            || settings.whitespace || '              ' || errorlabel || '\n'
            || settings.whitespace || '              rtdtype="' || (CellExists(screendata, "add_custom_rtdtype") AND screendata.add_custom_rtdtype ? `${screenbaseurl}rtd/${screendata.lib}` : "your-rtd-type-url") || '"\n'
            || settings.whitespace || (siteprofmember.required ? '              required="true"\n' : '')
            || settings.whitespace || '              />';
    }
    CASE "richarea"
    {
        xml := xml
            || '      <richarea composition="' || composition_name || '"\n'
            || '                cellname="' || GetSiteProfileXMLName(siteprofmember.name) || '"\n'
            || '                height="1pr"\n'
            || '                tagfilter="a-href img b i p ul ol"\n'
            || '                ' || errorlabel || '\n'
            || (siteprofmember.required ? '                required="true"\n' : '')
            || '                />';
    }
    CASE "array"
    {
      BOOLEAN hasrowtypes := CellExists(siteprofmember, "settings") AND CellExists(siteprofmember.settings, "types") AND Length(siteprofmember.settings.types) > 0;

      xml := xml
          || settings.whitespace || '<arrayedit composition="' || composition_name || '"\n'
          || settings.whitespace || '           cellname="' || GetSiteProfileXMLName(siteprofmember.name) || '"\n'
          || (hasrowtypes ? settings.whitespace || '           rowtypename="membertype"\n' : '')
          //|| settings.whitespace || '           rowaddscreen=".add' || GetSiteProfileXMLName(siteprofmember.name) || '"\n'
          || (NOT hasrowtypes ? settings.whitespace || '           roweditscreen=".edit_' || MakeSingular(GetSiteProfileXMLName(siteprofmember.name)) || '"\n' : '')
          || settings.whitespace || '           orderable="true"\n'
          || settings.whitespace || '           height="1pr"\n'
          || settings.whitespace || '           minheight="200px"\n'
          || settings.whitespace || '           ' || errorlabel || '\n'
          || (siteprofmember.required ? `${settings.whitespace}           minrows="1"\n` : "")
          || settings.whitespace || '           >\n';

      IF (hasrowtypes)
      {
        xml := xml || settings.whitespace || '          <column type="text" name="membertype" title="Type" />\n\n';

        FOREVERY (RECORD membertype FROM siteprofmember.settings.types)
        {
            xml := xml || settings.whitespace
                || '<rowdatatype type="' || GetSiteProfileXMLName(membertype.name) || '" '
                || 'screen=".edit_' || GetSiteProfileXMLName(siteprofmember.name) || '_' || GetSiteProfileXMLName(membertype.name) || '" '
                || 'title="' || membertype.title || '" '
                || '/>\n';
        }
      }
      ELSE
      {
        FOREVERY (RECORD arraymember FROM siteprofmember.members)
        {
          STRING typeuc := ToUpperCase(arraymember.type);
          SWITCH (typeuc)
          {
            CASE "TEXTEDIT","STRING","IMAGE"
            {
              STRING type := typeuc = "IMAGE" ? "blobrecord" : "text";

              xml := xml || settings.whitespace
                         || '  <column type="' || type || '" '
                         || 'name="' || GetSiteProfileXMLName(arraymember.name) || '" '
                         || (typeuc = "IMAGE" ? 'show="info" ' : '')
                         || (arraymember.title != "" ? 'title="' || arraymember.title || '" ' : '')
                         || '/>\n';
            }
            CASE "INTEXTLINK"
            {
              xml := xml || `${settings.whitespace}  <p:intextlinkcolumn name="${GetSiteProfileXMLName(arraymember.name)}" title="${arraymember.title}" />\n`;
            }
            CASE "WHFSREF"
            {
              xml := xml || `${settings.whitespace}  <p:whfsrefcolumn name="${GetSiteProfileXMLName(arraymember.name)}" display="path" title="${arraymember.title}" />\n`;
            }
          }
        }
      }

      xml := xml || settings.whitespace || '</arrayedit>';
    }
    CASE "image"
    {
      xml := xml
          || settings.whitespace || '<panel layout="left">\n'
          || settings.whitespace || '  <imgedit composition="' || composition_name || '"\n'
          || settings.whitespace || '           cellname="' || GetSiteProfileXMLName(siteprofmember.name) || '"\n'
          //|| settings.whitespace || '           title="' || (siteprofmember.title != "" ? siteprofmember.title : '') || '"\n'
          || settings.whitespace || '           width="300px"\n'
          || settings.whitespace || '           height="300px"\n'
          || settings.whitespace || '           allowedactions="all refpoint"\n'
          || settings.whitespace || '           title=""\n'
          || settings.whitespace || '           errorlabel="' || siteprofmember.title || '"\n'
          || settings.whitespace || '           publisher="false"\n'
          || settings.whitespace || (siteprofmember.required ? '           required="true"\n' : '')
          || settings.whitespace || '   />\n'
          || settings.whitespace || '</panel>';
    }
    CASE "whfsref"
    {
      xml := xml
          || '      <p:browseforobject composition="' || composition_name || '"\n'
          || '                         cellname="' || GetSiteProfileXMLName(siteprofmember.name) || '"\n'
          || (siteprofmember.title != "" ? '                         title="' || siteprofmember.title || '"\n' : "")
          || '                         width="1pr"\n'
          || '                         acceptfolders="false"\n'
          || '                         acceptfiles="true"\n'
          || '                         fullpath="/"\n'
          || (siteprofmember.required ? '                         required="true"\n' : '')
          || '                         />';
    }
    CASE "boolean"
    {
      xml := xml
          || '      <line layout="left">\n'
          || '        <checkbox composition="' || composition_name || '" '
          || 'cellname="' || GetSiteProfileXMLName(siteprofmember.name) || '" '
          || 'title="" '
          || (screendata.use_tids
              ? 'labeltid=".' || GetSiteProfileXMLName(siteprofmember.name) || '" '
              : 'label="' || siteprofmember.title || '" ')
          || '/>\n'
          || '      </line>';
    }
    CASE "datetime"
    {
      xml := xml || settings.whitespace
          || '<datetime composition="' || composition_name || '" '
          || 'cellname="' || GetSiteProfileXMLName(siteprofmember.name) || '" '
          || (siteprofmember.title != "" ? 'title="' || siteprofmember.title || '" ' : "");

      STRING dttype := "date";
      IF (CellExists(siteprofmember.settings, "datetype"))
      {
        IF (siteprofmember.settings.datetype = "datetime")
          dttype := "datetime";
        ELSE IF (siteprofmember.settings.datetype = "time")
          dttype := "time";
      }

      xml := xml || 'type="' || dttype || '" ';

      IF (dttype IN ["datetime","time"])
      {
        // check for non-default precision setting (default = "minutes")
        IF (CellExists(siteprofmember.settings, "precision"))
          xml := xml || 'precision="' || siteprofmember.settings.precision || '" ';
      }

      // check for non-default storeutc setting (default = FALSE)
      IF (CellExists(siteprofmember.settings, "storeutc") AND siteprofmember.settings.storeutc = TRUE)
        xml := xml || 'storeutc="true" ';

      xml := xml
          || (siteprofmember.required ? 'required="true" ' : '')
          || '/>';
    }
    CASE "intextlink"
    {
      xml := xml || settings.whitespace
          || '<p:intextlink composition="' || composition_name || '" '
          || 'cellname="' || GetSiteProfileXMLName(siteprofmember.name) || '" '
          || (siteprofmember.title != "" ? 'title="' || siteprofmember.title || '" ' : "")
          || (siteprofmember.required ? 'required="true" ' : '')
          || 'width="1pr" '
          || '/>';
    }
    DEFAULT
    {
      IF (ToUpperCase(siteprofmember.type) NOT IN ["FIXME","TABLE","CATEGORIES","TAGS","POSITIONSELECT","AMFORMS_FORM"])
        abort(siteprofmember.type); // remove this when certain we support all fields
      xml := xml || '      <!-- ' || siteprofmember.comments || ' -->';
    }
  }

  RETURN xml;
}

STRING FUNCTION GetApplies(RECORD siteprofilesection, STRING baseurl)
{
  IF (CellExists(siteprofilesection, "screen_only") AND siteprofilesection.screen_only = TRUE)
    RETURN "";

  STRING xml;

  BOOLEAN filetype_is_rtd;// := CellExists(siteprofilesection, "filetype_is_rtd") AND siteprofilesection.filetype_is_rtd = TRUE;

  STRING xmlns_file := baseurl || 'filetype/' || GetSiteProfileXMLName(siteprofilesection.lib);
  //IF (filetype_is_rtd)
    //xmlns_file := "http://www.webhare.net/xmlns/publisher/richdocumentfile";

  STRING xmlns_folder := baseurl || 'foldertype/' || GetSiteProfileXMLName(siteprofilesection.foldertype.title) || 's';

  //IF (siteprofilesection.use_rtd)
  //{

  //}
  //ELSE
  //{
    //IF (NOT siteprofilesection.page_only)
    //{
    //  xml := xml
    //      || '  <apply>\n'
    //      || '    <to type="all" parenttype="' || xmlns_folder || '" />\n'
    //      || '    <bodyrenderer library="' || siteprofilesection.lib || '.whlib" objectname="' || GetSiteProfileXMLName(siteprofilesection.lib) || 'page" />\n'
    //      || '  </apply>\n\n';
    //}

//    xml := xml
//          || '  <apply>\n';

////    IF (NOT siteprofilesection.page_only AND siteprofilesection.use_rtd)
////      xml := xml ||
////      `.   <to type="file" parenttype="${xmlns_folder}" filetype="http://www.webhare.net/xmlns/publisher/richdocumentfile" />
////`;
////    ELSE

//    xml := xml || '    <to type="file" filetype="' || xmlns_file || '" />\n';

//    IF (siteprofilesection.page_only)
//    {
//      xml := xml || `    <bodyrenderer library="${siteprofilesection.lib}.whlib" objectname="${GetSiteProfileXMLName(siteprofilesection.lib)}page" />` || '\n';
//    }

//    IF (filetype_is_rtd OR siteprofilesection.use_rtd)
//      xml := xml || '    <xsetobjecteditor name="publisher:editdocument" />\n';
//    ELSE
//      xml := xml || '    <yssetobjecteditor name="publisher:propertydialog" />\n';

//    xml := xml
//        || '    <extendproperties extension=".' || GetSiteProfileXMLName(siteprofilesection.lib) || '" contenttype="' || baseurl || 'filetype/' || GetSiteProfileXMLName(siteprofilesection.lib) || '" />\n'
//        || '  </apply>\n\n';
  //}

  RETURN xml;
}

PUBLIC STRING FUNCTION GenerateSiteProfileLibrary(STRING baseurl, RECORD siteprofilesection)
{
  screendata := siteprofilesection;

  STRING title_plural := siteprofilesection.title || (NOT siteprofilesection.page_only ? "s" : "");

  STRING name := GetSiteProfileXMLName(siteprofilesection.title);
  STRING name_plural := name || "s";
  STRING memberfields_detokenized := Detokenize((SELECT AS STRING ARRAY '"' || members.name || '"' FROM siteprofilesection.members), ",");

  BOOLEAN filetype_is_rtd := CellExists(siteprofilesection, "filetype_is_rtd") AND siteprofilesection.filetype_is_rtd = TRUE;
  BOOLEAN index_is_rtd := CellExists(siteprofilesection, "index_is_rtd") AND siteprofilesection.index_is_rtd = TRUE;

  filetype_is_rtd := FALSE;

  STRING ARRAY loadlibs;

  INSERT 'wh::witty.whlib' INTO loadlibs AT END;

  loadlibs := loadlibs CONCAT [ 'mod::publisher/lib/webdesign.whlib' ];

  IF (NOT siteprofilesection.page_only)
    loadlibs := loadlibs CONCAT [ 'mod::system/lib/database.whlib','mod::system/lib/whfs.whlib'];

  IF (Right(baseurl, 1) != "/")
    baseurl := baseurl || "/";

//IF (Length(siteprofilesection.members) > 0)
//  abort(siteprofilesection.members);

  STRING o;
  IF (siteprofilesection.is_prebuilt_page)
  {
    STRING webdesign := siteprofilesection.prebuilt_page_is_static ? "webdesign" : "this->webdesign";

    o :=
`PUBLIC OBJECTTYPE ${CapitalizeFirstChar(siteprofilesection.lib)}Page EXTEND ${siteprofilesection.prebuilt_page_is_static ? 'StaticPageBase' : 'WebPageBase'}
<
  UPDATE PUBLIC MACRO PTR FUNCTION GetPageBody(${siteprofilesection.prebuilt_page_is_static ? 'OBJECT webdesign' : ''})
  {
    INSERT "page-${siteprofilesection.lib}" INTO ${webdesign}->htmlclasses AT END;

    RECORD wittydata;

    RETURN PTR LoadWittyLibrary(Resolve("${siteprofilesection.lib}.witty"), "HTML-NI")->Run(wittydata);
  }
>;`;
  }
  ELSE IF (siteprofilesection.page_only)
  {
    o :=
`PUBLIC OBJECTTYPE ${CapitalizeFirstChar(siteprofilesection.lib)}Page EXTEND StaticPageBase
<
  UPDATE PUBLIC MACRO PTR FUNCTION GetPageBody(OBJECT webdesign)
  {
    INSERT "page-${siteprofilesection.lib}" INTO webdesign->htmlclasses AT END;

    RECORD ${siteprofilesection.lib}data := webdesign->targetobject->GetInstanceData("${baseurl}filetype/${siteprofilesection.lib}");

    RECORD wittydata :=
        CELL[ ...${siteprofilesection.lib}data
`;

    IF (siteprofilesection.use_rtd)
      o := o || `            , body := PTR webdesign->OpenRTDFromFile(webdesign->contentobject)->RenderAllObjects()
`;

    FOREVERY (RECORD siteprofmember FROM GenerateExtraMemberCellsForWhlib(siteprofilesection, `${siteprofilesection.lib}data.`))
    {
      loadlibs := loadlibs CONCAT siteprofmember.loadlibs;

      IF (siteprofmember.type = "image")
        siteprofmember.value := Substitute(siteprofmember.value, `WrapCachedImage(${siteprofmember.name}`, `WrapCachedImage(${siteprofilesection.lib}data.${siteprofmember.name}`);

      o := o || WS(12) || ', ' || siteprofmember.name || ' := ' || siteprofmember.value || '\n';
    }

    o := o ||
`            ];

    RETURN PTR LoadWittyLibrary(Resolve("${siteprofilesection.lib}.witty"), "HTML-NI")->Run(wittydata);
  }
>;`;
  }
  ELSE
  {
    o := 'PUBLIC OBJECTTYPE ' || CapitalizeFirstChar(siteprofilesection.lib) || 'Page EXTEND StaticPageBase\n'
             || '<\n'
             || '  OBJECT webdesign;\n'
             || '  RECORD wittydata;\n'
             || '  STRING wittycomponent;\n'
             || '\n'
             || '  UPDATE PUBLIC MACRO PrepareForRendering(OBJECT webdesign)\n'
             || '  {\n'
             || '    this->webdesign := webdesign;\n'
             || '\n'
             || '    IF (this->webdesign->targetfolder->indexdoc = webdesign->targetobject->id)\n'
             || '      this->PrepareForIndex();\n'
             || '    ELSE\n'
             || '      this->PrepareForDetails();\n'
             || '\n'
             || '    INSERT this->wittycomponent INTO this->webdesign->htmlclasses AT END;\n'
             || '  }\n'
             || '\n'
             || '  MACRO PrepareForIndex()\n'
             || '  {\n'
             || '    this->wittycomponent := "' || siteprofilesection.lib || 'index";\n'
             || '\n';

    IF (siteprofilesection.use_rtd)
    {
      o := o ||
`    OBJECT rtdtype := OpenWHFSType("http://www.webhare.net/xmlns/publisher/richdocumentfile");

    RECORD ARRAY ${siteprofilesection.lib} :=
         SELECT id
              , title
              , link := indexurl
           FROM system.fs_objects
          WHERE parent = this->webdesign->targetfolder->id
                AND type = rtdtype->id
                AND title != ""
                AND indexurl != ""
       ORDER BY ordering, ToUpperCase(title), id;

`;
    }

    o := o || '    OBJECT ' || siteprofilesection.lib || 'type := OpenWHFSType("' || baseurl || 'filetype/' || siteprofilesection.lib || '");\n';

    IF (siteprofilesection.use_rtd)
    {
      o := o || '\n';
    }
    ELSE
    {
      IF (filetype_is_rtd)
        o := o || '    OBJECT rtdtype := OpenWHFSType("http://www.webhare.net/xmlns/publisher/richdocumentfile");\n';

      o := o || '\n'
             || '    RECORD ARRAY ' || siteprofilesection.lib || ' := \n'
             || '         SELECT id\n'
             || '              , title\n'
             || '              , link := indexurl\n';

      IF (filetype_is_rtd)
        o := o || '              , intro := ""\n';

      o := o || '           FROM system.fs_objects\n'
             || '          WHERE parent = this->webdesign->targetfolder->id\n'
             || '                AND type = ' || (filetype_is_rtd ? 'rtd' : name) || 'type->id\n'
             //|| '                AND id != this->webdesign->targetfolder->indexdoc\n'
             || '                AND title != ""\n'
             || '                AND indexurl != ""\n'
             || '       ORDER BY ordering, ToUpperCase(title), id;\n'
             || '\n';
    }

    IF (Length(siteprofilesection.members) = 0)
    {
      //o := o || '    ' || name_plural || ' := ' || name || 'type->Enrich(' || name_plural || ', "id", [ ' || memberfields_detokenized || ' ]);\n';
    }
    ELSE
    {
      o := o || '    ' || siteprofilesection.lib || ' := \n'
        || '        SELECT *\n';

      FOREVERY (RECORD siteprofmember FROM GenerateExtraMemberCellsForWhlib(siteprofilesection, ""))
      {
        //IF (siteprofmember.value = "")
        //  CONTINUE;

        loadlibs := loadlibs CONCAT siteprofmember.loadlibs;
        o := o || WS(13) || ', ' || siteprofmember.name || ' := ' || siteprofmember.value || '\n';
        //SWITCH (siteprofmember.type)
        //{
        //  CASE "datetime"
        //  {
        //    INSERT 'wh::datetime.whlib' INTO loadlibs AT END;

        //    //FIXME: Take 'precision' and 'storeutc' into account

        //    o := o || WS(13) || ', ' || siteprofmember.name || ' := FormatDateTime("%d-%m-%Y", ' || siteprofmember.name || ')\n';
        //  }
        //  CASE "image"
        //  {
        //    INSERT 'mod::system/lib/cache.whlib' INTO loadlibs AT END;

        //    o := o || WS(13) || ', ' || siteprofmember.name || ' := WrapCachedImage(' || siteprofmember.name || ', [ method := "fit", setwidth := 1920, format := "image/jpeg" ])\n';
        //  }
        //}
      }

      o := o || WS(10) || 'FROM ' || siteprofilesection.lib || 'type->Enrich(' || siteprofilesection.lib || ', "id", [ ' || memberfields_detokenized || ' ]);\n\n';
    }

    //o := o || '\n';

    o := o || '    this->wittydata := CELL[ ' || siteprofilesection.lib || '\n';

    //IF (index_is_rtd)
      o := o || '                           , body := PTR this->webdesign->OpenRTDFromFile(this->webdesign->contentobject)->RenderAllObjects()\n';

    o := o || '                           ];\n'
           || '  }\n'
           || '\n'
           || '  MACRO PrepareForDetails()\n'
           || '  {\n'
           // FIXME: Support for custom cells, like dates and RTEs
           || '    this->wittycomponent := "' || siteprofilesection.lib || 'details";\n'
           || '\n'
           || '    RECORD ' || siteprofilesection.lib || 'data := this->webdesign->targetobject->GetInstanceData("' || baseurl || 'filetype/' || siteprofilesection.lib || '");\n'
           || '\n';

    //IF (filetype_is_rtd)
    //  o := o || '    OBJECT pagecontents := ;\n\n';

    o := o || '    this->wittydata := CELL[ ' || siteprofilesection.lib || 'data\n';

    IF (siteprofilesection.use_rtd)
      o := o || '                           , body := PTR this->webdesign->OpenRTDFromFile(this->webdesign->contentobject)->RenderAllObjects()\n';

    o := o || '                           ];\n'
           || '  }\n';

    o := o
        || '\n'
        || '  UPDATE PUBLIC MACRO RunBody(OBJECT webdesign)\n'
        || '  {\n'
        || '    LoadWittyLibrary(Resolve("' || siteprofilesection.lib || '.witty"), "HTML-NI")->RunComponent(this->wittycomponent, this->wittydata);\n'
        || '  }\n'
        || '>;\n';
  }

  // add <?wh and loadlibs
  STRING startoutput := '<?wh\n';
  loadlibs :=
      SELECT AS STRING ARRAY DISTINCT lib
        FROM ToRecordArray(loadlibs, "lib")
    ORDER BY lib LIKE "wh*" = FALSE, lib;

  FOREVERY (STRING lib FROM loadlibs)
    startoutput := startoutput || 'LOADLIB "' || lib || '";\n';

  o := startoutput || "\n" || o;

  RETURN o;
}

PUBLIC STRING FUNCTION GenerateSiteProfileWitty(RECORD siteprofilesection)
{
  IF (siteprofilesection.page_only OR siteprofilesection.is_prebuilt_page)
    RETURN `Hello ${siteprofilesection.lib} world`;

  screendata := siteprofilesection;

  STRING title_plural := siteprofilesection.title || "s";
  STRING name := GetSiteProfileXMLName(siteprofilesection.title);
  STRING name_plural := name || "s";
  STRING memberfields_detokenized := Detokenize((SELECT AS STRING ARRAY '"' || members.name || '"' FROM siteprofilesection.members), ",");

  BOOLEAN filetype_is_rtd := CellExists(siteprofilesection, "filetype_is_rtd") AND siteprofilesection.filetype_is_rtd = TRUE;
  BOOLEAN index_is_rtd := CellExists(siteprofilesection, "index_is_rtd") AND siteprofilesection.index_is_rtd = TRUE;

  filetype_is_rtd := FALSE;

  RETURN
`[component ${siteprofilesection.lib}index]
  <div class="p-${siteprofilesection.lib}index">
    [body]
  </div>
[/component]

[component ${siteprofilesection.lib}details]
  <div class="p-${siteprofilesection.lib}details">
${siteprofilesection.use_rtd ? `    [body]` : ''}
  </div>
[/component]
`;
}

STRING FUNCTION WS(INTEGER numspaces)
{
  STRING text;

  FOR (INTEGER i := 0; i < numspaces; i := i + 1)
    text := text || ' ';

  RETURN text;
}

STRING FUNCTION AddWS(STRING curtext, INTEGER numspaces, STRING str)
{
  RETURN curtext || WS(numspaces) || str;
}

STRING FUNCTION MakeSingular(STRING txt)
{
  // if txt ends with 's', removes that 's', making it singular
  IF (Right(txt,1) = "s")
    txt := Substring(txt, 0, Length(txt) - 1);

  RETURN txt;
}

STRING FUNCTION TidOrTitle(BOOLEAN use_tid, STRING tid, STRING title)
{
  IF (use_tid)
    RETURN `tid="${tid}"`;

  RETURN `title="${title}"`;
}

PUBLIC STRING FUNCTION GenerateSiteProfileEmbObj(STRING baseurl, RECORD siteprofilesection)
{
  screendata := siteprofilesection;

  IF (Right(baseurl, 1) != "/")
    baseurl := baseurl || "/";

  screenbaseurl := baseurl;

  STRING name := GetSiteProfileXMLName(siteprofilesection.name);

  STRING o :=
`<?xml version="1.0" encoding="UTF-8" ?>
<siteprofile xmlns="http://www.webhare.net/xmlns/publisher/siteprofile"
             xmlns:p="http://www.webhare.net/xmlns/publisher/components"
`;

  IF (siteprofilesection.use_tids)
    o := o || '             gid="siteprofile.embeddedobjects"\n';

  o := o ||
`             >
`;

  IF (siteprofilesection.add_custom_rtdtype)
  {
    o := o ||
`
  <rtdtype namespace="${baseurl}rtd/${name}">
    <css path="../../shared/rtd/rtd.css" />
    <blockstyles defaultstyle="NORMAL">
      <textstyle tag="NORMAL" textstyles="b i a-href sup sub strike" />
    </blockstyles>
  </rtdtype>
`;
  }

  o := o ||
`
  <widgettype namespace="${baseurl}embeddedobjects/${GetSiteProfileXMLName(siteprofilesection.name)}"
              editscreen=".${name}"
              renderlibrary="${name}.whlib"
              renderobjectname="${name}"
              wittycomponent="${name}.witty:embeddedobject"
              ${TidOrTitle(screendata.use_tids, `siteprofile.embeddedobjects.type-${siteprofilesection.name}`, siteprofilesection.originaltitle)}
              >
    <members>
`;

  // add <contenttye> with <member>s and <propertyeditor>s
  RECORD ARRAY members;
  FOREVERY (RECORD mem FROM siteprofilesection.members)
  {
    IF (NOT RecordExists(SELECT FROM members WHERE ToUpperCase(members.name) = ToUpperCase(mem.name)))
    {
      INSERT mem INTO members AT END;
    }
  }

  FOREVERY (RECORD smember FROM members)
  {
    o := o || "  " || GetSiteProfileMember(smember, 4);
  }

  o := o || '    </members>\n'
         || '  </widgettype>';

  STRING gidortitle := siteprofilesection.use_tids
                       ? `gid=".${name}"`
                       : `title="Bewerk ${siteprofilesection.title}"`;

  BOOLEAN anytabs := RecordExists(SELECT FROM siteprofilesection.members WHERE owntab);

  o := o ||
`

  <screen xmlns="http://www.webhare.net/xmlns/tollium/screens"
          implementation="p:widgetedit"
          name="${name}"
          ${gidortitle}
          minwidth="600px"
          minheight="500px"
          allowresize="true"
          savestate="size"
          >
    <compositions>
      <record name="contentdata" />
    </compositions>
    <body${anytabs ? ' spacers="none"' : ''}>
`;
  IF (anytabs)
    o := AddWS(o, 6, `<tabs height="1pr">\n`);

  IF (Length(siteprofilesection.members) = 0)
    o := o || '      <text title="" value="Dit blok heeft geen instelbare eigenschappen." />\n';
  ELSE
    o := o || AddBoxesToPropertyEditor(siteprofilesection.members, "", [ isembobj := TRUE ]);

  IF (anytabs)
    o := AddWS(o, 6, `</tabs>\n`);

  o := o ||

`    </body>
    <footer>
      <defaultformbuttons buttons="ok cancel" />
    </footer>
  </screen>`;

  o := o || GetPropertyEditor(siteprofilesection
                            , baseurl
                            , TRUE
                            , [ isembobj := TRUE ]);

  RETURN o || '\n\n</siteprofile>';
}

PUBLIC STRING FUNCTION GenerateSiteProfileLibraryEmbObj(STRING baseurl, RECORD siteprofilesection)
{
  screendata := siteprofilesection;

  STRING ARRAY loadlibs := [ 'mod::publisher/lib/widgets.whlib' ];

  RECORD ARRAY extradata := GenerateExtraMemberCellsForWhlib(siteprofilesection, 'this->data.');

  FOREVERY (RECORD siteprofmember FROM extradata)
    loadlibs := loadlibs CONCAT siteprofmember.loadlibs;

  //FOREVERY (RECORD siteprofmember FROM siteprofilesection.members)
  //{
  //  SWITCH (siteprofmember.type)
  //  {
  //    CASE "datetime"
  //    {
  //      INSERT 'wh::datetime.whlib' INTO loadlibs AT END;

  //      INSERT [ name := siteprofmember.name
  //             , value := `FormatDateTime("%d-%m-%Y", this->data.${siteprofmember.name})`
  //             ] INTO extradata AT END;
  //    }
  //    CASE "image"
  //    {
  //      INSERT 'mod::system/lib/cache.whlib' INTO loadlibs AT END;

  //      INSERT [ name := siteprofmember.name
  //             , value := `WrapCachedImage(this->data.${siteprofmember.name}, [ method := "fit", setwidth := 1920, format := "image/jpeg" ])`
  //             ] INTO extradata AT END;
  //    }
  //    CASE "array"
  //    {
  //      INSERT [ name := siteprofmember.name
  //             , value := `(SELECT * FROM this->data.${siteprofmember.name})`
  //             ] INTO extradata AT END;
  //    }
  //    CASE "richdocument"
  //    {
  //      STRING rtdtype := CellExists(screendata, "add_custom_rtdtype") AND screendata.add_custom_rtdtype
  //                        ? `${baseurl}rtd/${screendata.name}`
  //                        : "your-rtd-type-url";

  //      INSERT [ name := siteprofmember.name
  //             , value := `PTR this->context->OpenRTD(this->data.${siteprofmember.name}, "${rtdtype}")->RenderAllObjects()`
  //             ] INTO extradata AT END;
  //    }
  //    CASE "intextlink"
  //    {
  //      INSERT 'mod::publisher/lib/publisher.whlib' INTO loadlibs AT END;

  //      INSERT [ name := siteprofmember.name
  //             , value := `GetInTextLinkTarget(this->data.${siteprofmember.name})`
  //             ] INTO extradata AT END;
  //    }
  //  }
  //}

  // add <?wh and loadlibs
  STRING o := '<?wh\n\n';
  loadlibs :=
      SELECT AS STRING ARRAY DISTINCT lib
        FROM ToRecordArray(loadlibs, "lib")
    ORDER BY lib LIKE "wh*" = FALSE, lib;

  FOREVERY (STRING lib FROM loadlibs)
    o := o || 'LOADLIB "' || lib || '";\n';

  o := o ||
`
PUBLIC OBJECTTYPE ${siteprofilesection.name} EXTEND WidgetBase
<
  UPDATE PUBLIC MACRO Render()
  {
`;

  IF (RecordExists(extradata))
  {
    o := o ||
`    RECORD data :=
       CELL[ ...this->data`;

    FOREVERY (RECORD extradatarec FROM extradata)
    {
      IF (extradatarec.value != "")
      {
        o := o || `
           , ${extradatarec.name} := ${extradatarec.value}`;
      }
    }

    o := o ||
`
           ];

    this->EmbedComponent(data);`;
  }
  ELSE
  {
    o := o || '    this->EmbedComponent(this->data);';
  }

o := o ||
`
  }
>;`;

  RETURN o;
}

PUBLIC STRING FUNCTION GenerateSiteProfileWittyEmbObj(RECORD siteprofilesection)
{
  screendata := siteprofilesection;

  STRING title_plural := siteprofilesection.title || "s";
  STRING name := GetSiteProfileXMLName(siteprofilesection.name);
  STRING name_plural := name || "s";
  STRING memberfields_detokenized := Detokenize((SELECT AS STRING ARRAY '"' || members.name || '"' FROM siteprofilesection.members), ",");

  BOOLEAN filetype_is_rtd := CellExists(siteprofilesection, "filetype_is_rtd") AND siteprofilesection.filetype_is_rtd = TRUE;
  BOOLEAN index_is_rtd := CellExists(siteprofilesection, "index_is_rtd") AND siteprofilesection.index_is_rtd = TRUE;

  filetype_is_rtd := FALSE;

  STRING typetitle := siteprofilesection.use_tids
                      ? `[gettid siteprofile.embeddedobjects.type-${name}]`
                      : siteprofilesection.title;

  STRING o :=
`[component embeddedobject]
  <section class="embeddedobject embeddedobject--${GetSiteProfileXMLName(siteprofilesection.name)} embeddedobject--[if isrtdpreview]preview[else]site[/if]">
    [if isrtdpreview]
      <div class="embeddedobject__type">${typetitle}</div>
    [else]
      <div class="emb-${GetSiteProfileXMLName(siteprofilesection.name)}">
        [!
`;

  FOREVERY (RECORD siteprofmember FROM siteprofilesection.members)
  {
    o := o || '        [' || siteprofmember.name || ']\n';
  }

  o := o ||
`        !]
      </div>
    [/if]
  </section>
[/component]`;

  RETURN o;
}

STRING FUNCTION CapitalizeFirstChar(STRING text)
{
  RETURN ToUpperCase(Left(text,1)) || Substring(text, 1);
}

STRING FUNCTION CapitalizeFirstCharForForm(STRING text)
{
  text := CapitalizeFirstChar(text);
  RETURN Substitute(text, "form", "Form");
}

// generates whlb for special members, like images, datetimes, RTDs, etc
RECORD ARRAY FUNCTION GenerateExtraMemberCellsForWhlib(RECORD siteprofile, STRING recordname)
{
  RECORD ARRAY returnmembers; // type, loadlibs, name, value
  FOREVERY (RECORD siteprofmember FROM siteprofile.members)
  {
    RECORD addrec := CELL[ siteprofmember.type
                         , siteprofmember.name
                         , loadlibs := STRING[]
                         , value := ""
                         ];

    SWITCH (siteprofmember.type)
    {
      CASE "datetime"
      {
        //FIXME: Take 'precision' and 'storeutc' into account
        addrec := [ ...addrec
                  , loadlibs := ['wh::datetime.whlib']
                  , value := `FormatDateTime("%d-%m-%Y", ${siteprofmember.name}`
                  ];
      }
      CASE "image"
      {
        addrec := [ ...addrec
                  , loadlibs := ['mod::system/lib/cache.whlib']
                  , value := `WrapCachedImage(${recordname}${siteprofmember.name}, [ method := "fit", setwidth := 1920, format := "image/jpeg" ])`
                  ];
      }
      CASE "array"
      {
        STRING value := `(SELECT *\n`;

        STRING ARRAY loadlibs;
        FOREVERY (RECORD arraymember FROM siteprofmember.members)
        {
          RECORD arraymemberdata := GenerateExtraMemberCellsForWhlib([ members := [arraymember]], "");
          IF (NOT RecordExists(arraymember)) // not a special case
            CONTINUE;

          IF (NOT CellExists(arraymemberdata, "name"))
            CONTINUE;

          value := value || `${WS(Length(siteprofmember.name) + 23)}, ${arraymemberdata.name} := ${arraymemberdata.value}\n`;

          IF (CellExists(arraymemberdata, "loadlibs"))
            loadlibs := loadlibs CONCAT arraymemberdata.loadlibs;
        }

        value := value || `${WS(Length(siteprofmember.name) + 20)}FROM ${recordname}${siteprofmember.name})`;

        addrec := CELL[ ...addrec
                      , siteprofmember.name
                      , value
                      , loadlibs
                      ];
      }
      CASE "richdocument"
      {
        STRING rtdtype := CellExists(siteprofile, "add_custom_rtdtype") AND siteprofile.add_custom_rtdtype
                          ? `${screenbaseurl}rtd/${siteprofile.lib}`
                          : "your-general-rtd-type-url";

        addrec := [ ...addrec
                  , name := siteprofmember.name
                  , value := `PTR ${siteprofile.codetype = "embeddedobject" ? "this->context" : "webdesign"}->OpenRTD(${recordname}${siteprofmember.name}, "${rtdtype}")->RenderAllObjects()`
                  ];
      }
      CASE "intextlink"
      {
        addrec := [ ...addrec
                  , name := siteprofmember.name
                  , value := `GetInTextLinkTarget(${siteprofmember.name})`
                  , loadlibs := ['mod::publisher/lib/publisher.whlib']
                  ];
      }
    }

    IF (addrec.value != "")
      INSERT addrec INTO returnmembers AT END;
  }

  RETURN returnmembers;
}

PUBLIC STRING FUNCTION GenerateFormFormDefXML(RECORD data)
{
  STRING o :=
`<?xml version="1.0" ?>
<formdefinitions xmlns="http://www.webhare.net/xmlns/publisher/forms">
  <form name="${ToLowerCase(data.form_tag)}"
        library="${ToLowerCase(data.form_tag)}.whlib"
        objectname="${ToLowerCase(data.form_tag)}"
        jshandler="<module>:${ToLowerCase(data.form_tag)}"
        >
    <page>
      <textedit name="name" title="Naam" required="true" />
      <textedit name="email" title="E-mailadres" required="true" validationchecks="email" />
    </page>
  </form>
</formdefinitions>
`;

  RETURN o;
}

PUBLIC STRING FUNCTION GenerateJavaScriptForm(RECORD data) // form_tag
{
  STRING o :=
`import * as dompack from 'dompack';
import { RPCFormBase, registerHandler } from '@mod-publisher/js/forms';

class ${CapitalizeFirstCharForForm(data.form_tag)} extends RPCFormBase {
  constructor(node) {
    super(node);

    if (dompack.debugflags['debug'])
      this.invokeRPC('debugprefill');
  }

  //getFormExtraSubmitData() {
  //  return { x: 'y' };
  //}
}

dompack.onDomReady(() => {
});

registerHandler('<module>:${ToLowerCase(data.form_tag)}', node => new ${CapitalizeFirstCharForForm(data.form_tag)}(node));
`;

  RETURN o;
}

PUBLIC STRING FUNCTION GenerateFormLibrary(RECORD data)
{
  STRING o :=
`<?wh

LOADLIB "wh::files.whlib";

LOADLIB "mod::publisher/lib/forms/base.whlib";

LOADLIB "mod::system/lib/mailer.whlib";


PUBLIC OBJECTTYPE ${CapitalizeFirstCharForForm(data.form_tag)} EXTEND FormBase
<
  MACRO NEW()
  {
  }

  PUBLIC MACRO RPC_DebugPrefill()
  {
    ^name->value := "Pietje";
    ^email->value := \`info+${Random(0, 9999999)}@example.com\`;
  }

  RECORD FUNCTION Submit(RECORD extradata)
  {
    RECORD result := [ success := FALSE
                     ];

    OBJECT work := this->BeginWork();

    // e-mail confirmation
    RECORD ARRAY fields :=
       [[ title := "Naam", value := ^name->value ]
       ,[ title := "E-mail", value := ^email->value ]
       ];

    STRING msg := "<br />";
    FOREVERY (RECORD field FROM fields)
      IF (field.value != "")
        msg := msg || "<b>" || EncodeHTML(field.title) || "</b>: " || EncodeHTML(field.value) || "<br /><br />";

    OBJECT mail := MakeEmailComposer();
    mail->origin := "<module>_${ToLowerCase(data.form_tag)}";
    //mail->mailfrom := "info@webwerf.nl";
    mail->mailto := ["info@webwerf.nl"];
    mail->subject := "${CapitalizeFirstCharForForm(data.form_tag)} ingevoerd";
    mail->SetRichBody(StringToBlob(msg), "text/html");
    mail->QueueMailInWork();

    work->Finish();

    result.success := TRUE;

    RETURN result;
  }
>;
`;

  RETURN o;
}

PUBLIC STRING FUNCTION GenerateFormWitty(RECORD data)
{
  STRING o :=
`[component ${ToLowerCase(data.form_tag)}]
  <div class="${ToLowerCase(data.form_tag)}">
    <form class="wh-form" [${ToLowerCase(data.form_tag)}.formattributes]>
      <div class="wh-form__page">
        [${ToLowerCase(data.form_tag)}.name.render]
        [${ToLowerCase(data.form_tag)}.email.render]
      </div>
      <div class="wh-form__page" data-wh-form-pagerole="thankyou">
        Bedankt voor het invullen van het formulier
      </div>
      [${ToLowerCase(data.form_tag)}.formrendernav]
    </form>
  </div>
[/component]
`;

  RETURN o;
}
