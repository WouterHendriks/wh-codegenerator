<?wh
LOADLIB "wh::files.whlib";

STRING defaultboxname := "Instellingen";
//STRING defaultboxname := lang = "nl" ? "Instellingen" : "Settings";

PUBLIC STRING FUNCTION GenerateSiteprofile(STRING baseurl, RECORD siteprofilesection)
{
  STRING o := '  <!-- ***********************************************************************\n'
           || '\n'
           || '       ' || siteprofilesection.title || 's\n'
           || '\n'
           || '  ***********************************************************************  -->\n';

  FOREVERY (RECORD foldertype FROM siteprofilesection.foldertypes)
  {
    o := o || GetFolderType(foldertype, baseurl) || "\n\n";
  }

  FOREVERY (RECORD filetype FROM siteprofilesection.filetypes)
  {
    o := o || GetFileType(filetype, baseurl)
           || "\n\n";
  }

  // add <contenttye> with <member>s and <propertyeditor>s
  IF (Length(siteprofilesection.members) = 0) // no members, just a <contenttype> then
  {
    o := o || '  <contenttype namespace="' || baseurl || 'xmlns/filetype/' || GetSiteProfileXMLName(siteprofilesection.name) || '" />\n\n';
  }
  ELSE
  {
    o := o || '  <contenttype namespace="' || baseurl || 'xmlns/filetype/' || GetSiteProfileXMLName(siteprofilesection.name) || '">\n';

    RECORD ARRAY members;
    FOREVERY (RECORD mem FROM siteprofilesection.members)
    {
      IF (NOT RecordExists(SELECT FROM members WHERE ToUpperCase(members.name) = ToUpperCase(mem.name)))
      {
        INSERT mem INTO members AT END;
      }
    }

    FOREVERY (RECORD smember FROM members)
    {
      o := o || GetSiteProfileMember(smember);
    }

    o := o || '  </contenttype>\n\n'
           || GetPropertyEditor([ members := siteprofilesection.members
                                , name := siteprofilesection.name
                                , title := siteprofilesection.title
                                ]
                              , baseurl)
           || "\n\n"
           || GetApplies(siteprofilesection, baseurl) || "\n\n";
  }

  RETURN o;
}

STRING FUNCTION GetFileType(RECORD data, STRING baseurl)
{
  //ADDME: Option to add rich text document instead of custom file types; set blobiscontent to TRUE then

  BOOLEAN addwebpage := NOT CellExists(data, "no_webpage") OR data.no_webpage = FALSE;

  STRING o := '  <filetype typedef="' || baseurl || 'xmlns/filetype/' || GetSiteProfileXMLName(data.title) || '"\n'
           || '            title="' || EncodeHTML(data.title) || '"\n'
           || '            blobiscontent="false"\n'
           || '            ispublishable="true"\n'
           || '            tolliumicon="tollium:files/text_plain"\n';

  IF (addwebpage)
  {
    o := o || '            isacceptableindex="false"\n'
           || '            ispublishedassubdir="true"\n'
           || '            needstemplate="true"\n';
  }

  o := o || '            />';

  RETURN o;
}

STRING FUNCTION GetFolderType(RECORD data, STRING baseurl)
{
  RETURN '  <foldertype typedef="' || baseurl || 'xmlns/foldertype/' || GetSiteProfileXMLName(data.title) || 's"\n'
      || '              title="' || EncodeHTML(data.title) || 's"\n'
      || '              tolliumicon="tollium:folders/projects"\n'
      || '              indexfile="contentlisting"\n'
      || '              protectindexfile="true"\n'
      || '              >\n'
      || '  </foldertype>\n'// we probably want to add something within
      || '\n'
      || '  <contenttype namespace="' || baseurl || 'xmlns/foldertype/' || GetSiteProfileXMLName(data.title) || 's">\n'
      || '  </contenttype>';
}

STRING FUNCTION GetSiteProfileMember(RECORD data)
{
  IF (ToUpperCase(data.type) = "ARRAY")
  {
    STRING xml := '    <member name="' || GetSiteProfileXMLName(data.name) || '" type="array">\n';

    BOOLEAN hasrowtypes := CellExists(data, "settings") AND CellExists(data.settings, "types") AND Length(data.settings.types) > 0;

    IF (hasrowtypes)
      xml := xml || '      <member name="membertype" type="string" />\n';

    RECORD ARRAY childmembers := SELECT *
                                      , name := GetSiteProfileXMLName(name)
                                   FROM data.members;

    childmembers := SELECT childmembers.name
                         , type := Any(childmembers.type)
                         , comments := Any(childmembers.comments)
                      FROM childmembers
                  GROUP BY childmembers.name;

    FOREVERY (RECORD childmember FROM childmembers)
      xml := xml || '  ' || GetSiteProfileMember(childmember);

    xml := xml || "    </member>\n";

    RETURN xml;
  }

  STRING xml := '    <member name="' || GetSiteProfileXMLName(data.name) || '" type="';

  SWITCH (ToUpperCase(data.type))
  {
    CASE "STRING","TEXTAREA"
    {
      xml := xml || 'string"';
    }
    CASE "RICHDOCUMENT"
    {
      xml := xml || 'richdocument"';
    }
    CASE "FILE","IMAGE"
    {
      xml := xml || 'file"';
    }
    DEFAULT
    {
      xml := xml || data.type || '"';
    }
  }

  xml := xml || ' />';

  IF (data.comments != "")
    xml := xml || ' <!-- ' || data.comments || ' -->';

  RETURN xml || "\n";
}

PUBLIC STRING FUNCTION GetSiteProfileXMLName(STRING txt)
{
  txt := ToLowerCase(GetSafeFileName(txt));
  txt := Substitute(txt, "-", "_");
  RETURN txt;
}

STRING FUNCTION GetPropertyEditor(RECORD data, STRING baseurl)
{
  STRING xml := '  <propertyeditor name="' || GetSiteProfileXMLName(data.name) || '">\n'
             || '    <compositions>\n'
             || '      <p:whfsinstance name="fsinstance" typedef="' || baseurl || 'xmlns/filetype/' || GetSiteProfileXMLName(data.name) || '" />\n'
             || '    </compositions>\n'
             || '    <newtab title="' || data.title || '">\n';

  xml := xml || AddBoxesToPropertyEditor(data.members);

  xml := xml || '    </newtab>\n'
             || '  </propertyeditor>';

  // add screens for array types
  RECORD ARRAY memberarraytypes := SELECT * FROM data.members WHERE type = "array";
  FOREVERY (RECORD memberarraytype FROM memberarraytypes)
  {
    IF (CellExists(memberarraytype, "settings") AND CellExists(memberarraytype.settings, "types") AND Length(memberarraytype.settings.types) >= 1)
    {
      FOREVERY (RECORD arraytype FROM memberarraytype.settings.types)
      {
        xml := xml
            || '\n\n  <t:screen title="' || memberarraytype.title || '" name="edit_' || GetSiteProfileXMLName(memberarraytype.name) || '_' || GetSiteProfileXMLName(arraytype.name) || '" implementation="rowedit">\n'
            || '    <t:compositions>\n'
            || '      <t:record name="row" />\n'
            || '    </t:compositions>\n'
            || '    <t:body>\n';

        xml := xml || AddBoxesToPropertyEditor(arraytype.members, "row");

        xml := xml
            || '    </t:body>\n'
            || '    <t:footer>\n'
            || '      <t:defaultformbuttons buttons="ok cancel" />\n'
            || '    </t:footer>\n'
            || '  </t:screen>';
      }
    }
    ELSE IF (Length(memberarraytype.members) > 0)
    {
      xml := xml
          || '\n\n  <t:screen title="Edit ' || memberarraytype.title || '" name="edit_' || GetSiteProfileXMLName(memberarraytype.name) || '" implementation="rowedit">\n'
          || '    <t:compositions>\n'
          || '      <t:record name="row" />\n'
          || '    </t:compositions>\n'
          || '    <t:body>\n';

      xml := xml || AddBoxesToPropertyEditor(memberarraytype.members, "row");

      xml := xml
          || '    </t:body>\n'
          || '    <t:footer>\n'
          || '      <t:defaultformbuttons buttons="ok cancel" />\n'
          || '    </t:footer>\n'
          || '  </t:screen>';
    }
  }

  RETURN xml;
}

STRING FUNCTION AddBoxesToPropertyEditor(RECORD ARRAY siteprofmembers, STRING composition_name DEFAULTSTO "")
{
  RECORD ARRAY boxes := [[ title := defaultboxname
                         , members := DEFAULT RECORD ARRAY
                         ]
                        ];

  FOREVERY (RECORD siteprofmember FROM siteprofmembers)
  {
    IF (siteprofmember.type iN ["image","array","richdocument"]) // own box
      INSERT [ title := siteprofmember.title, members := [ siteprofmember ] ] INTO boxes AT END;
    ELSE // default box
      INSERT siteprofmember INTO boxes[0].members AT END;
  }

  STRING xml;

  FOREVERY (RECORD box FROM boxes)
  {
    IF (Length(box.members) > 0)
    {
      xml := xml ||  '      <t:heading title="' || box.title || '" />\n';

      FOREVERY (RECORD siteprofmember FROM box.members)
        xml := xml || GetPropertyEditorElement(siteprofmember, composition_name) || "\n";

      if (#box+1 < Length(boxes))
        xml := xml ||  '      <t:hr />\n\n';
    }
  }

  RETURN xml;
}

STRING FUNCTION GetPropertyEditorElement(RECORD siteprofmember, STRING composition_name DEFAULTSTO "")
{
    STRING xml;

    composition_name := composition_name ?? "fsinstance";

    SWITCH (siteprofmember.type)
    {
      CASE "string"
      {
        STRING specialtype;
        IF (CellExists(siteprofmember, "settings") AND RecordExists(siteprofmember.settings) AND CellExists(siteprofmember.settings, "specialtype"))
          specialtype := siteprofmember.settings.specialtype;

        IF (specialtype = "color")
        {
          /*
          // FIXME: <coloredit> is pretty useless at the moment, falling back to textedit for now
          // https://gitlab.b-lex.com/webhare/webhare/issues/335
          xml := xml || '      '
              || '<coloredit composition="' || composition_name || '" '
              || 'cellname="' || GetSiteProfileXMLName(siteprofmember.name) || '" '
              || 'title="' || siteprofmember.title || '" '
              || (siteprofmember.required ? 'required="true" ' : '')
              || '/>';
          */
          xml := xml
              || '      <t:line>\n'
              || '        <t:textedit composition="' || composition_name || '" '
              || 'cellname="' || GetSiteProfileXMLName(siteprofmember.name) || '" '
              || 'title="' || siteprofmember.title || '" '
              || (siteprofmember.required ? 'required="true" ' : '')
              || 'width="10x" '
              || '/>\n'
              || '        <t:text title="" value="(#cc00ff)" />\n'
              || '      </t:line>';
        }
        ELSE
        {
          xml := xml || '      '
              || '<t:textedit composition="' || composition_name || '" '
              || 'cellname="' || GetSiteProfileXMLName(siteprofmember.name) || '" '
              || 'title="' || siteprofmember.title || '" ';

          IF (specialtype = "integer")
            xml := xml || 'valuetype="integer" ';

          xml := xml
              || (siteprofmember.required ? 'required="true" ' : '')
              || 'width="1pr" '
              || '/>';
        }
      }
      CASE "textarea"
      {
        xml := xml || '      '
            || '<t:textarea composition="' || composition_name || '" '
            || 'cellname="' || GetSiteProfileXMLName(siteprofmember.name) || '" '
            || 'title="' || siteprofmember.title || '" '
            || 'width="1pr" '
            || 'height="3x" '
            || (siteprofmember.required ? 'required="true" ' : '')
            || '/>';
      }
      CASE "richdocument"
      {
          xml := xml
              || '      <t:rte composition="' || composition_name || '"\n'
              || '             cellname="' || GetSiteProfileXMLName(siteprofmember.name) || '"\n'
              || '             height="1pr"\n'
              || '             minwidth="400px"\n'
              || '             minheight="250px"\n'
              || '             errorlabel="' || siteprofmember.title || '"\n'
              || '             tagfilter="b i a-href img ul ol li strike"\n'
              || (siteprofmember.required ? '             required="true"\n' : '')
              || '             type="html-block"\n'
              || '             >\n'
              || '        <t:linkhandlers>\n'
              || '          <p:internallinks />\n'
              || '        </t:linkhandlers>\n'
              || '      </t:rte>';
      }
      CASE "array"
      {
        BOOLEAN hasrowtypes := CellExists(siteprofmember, "settings") AND CellExists(siteprofmember.settings, "types") AND Length(siteprofmember.settings.types) > 0;

/*
<screen name="edit_header_link" title="Bewerk link" implementation="rowedit" xmlns="http://www.webhare.net/xmlns/tollium/screens">
<compositions>
  <record name="row" />
</compositions>
<body>
  <box title="Instellingen" xmlns="http://www.webhare.net/xmlns/tollium/screens">
    <textedit composition="row" cellname="title" title="Titel" required="true" width="1pr" />
    <p:intextlink composition="row" cellname="link" title="Link" width="1pr" required="true" />
  </box>
  <defaultformbuttons buttons="ok cancel" />
</body>
</screen>

*/

        xml := xml
            || '      <t:arrayedit composition="' || composition_name || '"\n'
            || '                   cellname="' || GetSiteProfileXMLName(siteprofmember.name) || '"\n'
            || (hasrowtypes ? '                   rowtypename="membertype"\n' : '')
            //|| '                   rowaddscreen=".add' || GetSiteProfileXMLName(siteprofmember.name) || '"\n'
            || (NOT hasrowtypes ? '                   roweditscreen=".edit_' || GetSiteProfileXMLName(siteprofmember.name) || '"\n' : '')
            || '                   orderable="true"\n'
            || '                   rowselect="true"\n'
            || '                   width="1pr"\n'
            || '                   height="1pr"\n'
            || '                   >\n';

        IF (hasrowtypes)
        {
          xml := xml || '        <t:column type="text" name="membertype" title="Type" />\n\n';

          FOREVERY (RECORD membertype FROM siteprofmember.settings.types)
          {
              xml := xml || '      '
                  || '<t:rowdatatype type="' || GetSiteProfileXMLName(membertype.name) || '" '
                  || 'screen=".edit_' || GetSiteProfileXMLName(siteprofmember.name) || '_' || GetSiteProfileXMLName(membertype.name) || '" '
                  || 'title="' || membertype.title || '" '
                  || '/>\n';
          }

        }
        ELSE
        {
          FOREVERY (RECORD arraymember FROM siteprofmember.members)
          {
            SWITCH (ToUpperCase(arraymember.type))
            {
              CASE "TEXTEDIT"
              {
                xml := xml || '        <t:column type="text" name="' || GetSiteProfileXMLName(arraymember.name) || '" title="' || arraymember.title || '" />\n';
              }
            }
          }
        }

        xml := xml || '      </t:arrayedit>';
      }
      CASE "image"
      {
        xml := xml
            || '      <t:imageedit composition="' || composition_name || '"\n'
            || '                   cellname="' || GetSiteProfileXMLName(siteprofmember.name) || '"\n'
            || '                   imagewidth="300px"\n'
            || '                   imageheight="300px"\n'
            || '                   preserveifunchanged="true"\n'
            || '                   errorlabel="' || siteprofmember.title || '"\n'
            || (siteprofmember.required ? '                   required="true"\n' : '')
            || '                   />';
      }
      CASE "whfsref"
      {
        xml := xml
            || '      <!-- FIXME: link this field to something -->\n'
            || '      <p:browseforobject composition="' || composition_name || '"\n'
            || '                         cellname="' || GetSiteProfileXMLName(siteprofmember.name) || '"\n'
            || '                         title="' || siteprofmember.title || '"\n'
            || '                         width="1pr"\n'
            || '                         acceptfolders="false"\n'
            || '                         acceptfiles="true"\n'
            || '                         fullpath="/"\n'
            || (siteprofmember.required ? '                         required="true"\n' : '')
            || '                         />';
      }
      CASE "boolean"
      {
        xml := xml
            || '      <t:line layout="left">\n'
            || '        <t:checkbox composition="' || composition_name || '" '
            || 'cellname="' || GetSiteProfileXMLName(siteprofmember.name) || '" '
            || 'title="" '
            || 'label="' || siteprofmember.title || '" '
            || '/>\n'
            || '      </t:line>';
      }
      CASE "datetime"
      {
        xml := xml || '      '
            || '<t:datetime composition="' || composition_name || '" '
            || 'cellname="' || GetSiteProfileXMLName(siteprofmember.name) || '" '
            || 'title="' || siteprofmember.title || '" ';

        STRING dttype := "date";
        IF (CellExists(siteprofmember.settings, "datetype"))
        {
          IF (siteprofmember.settings.datetype = "datetime")
            dttype := "datetime";
          ELSE IF (siteprofmember.settings.datetype = "time")
            dttype := "time";
        }

        xml := xml || 'type="' || dttype || '" ';

        IF (dttype IN ["datetime","time"])
        {
          // check for non-default precision setting (default = "minutes")
          IF (CellExists(siteprofmember.settings, "precision") AND siteprofmember.settings.precision != "minutes")
            xml := xml || 'precision="' || siteprofmember.settings.precision || '" ';
        }

        // check for non-default storeutc setting (default = FALSE)
        IF (CellExists(siteprofmember.settings, "storeutc") AND siteprofmember.settings.storeutc = TRUE)
          xml := xml || 'storeutc="true" ';

        xml := xml
            || (siteprofmember.required ? 'required="true" ' : '')
            || '/>';
      }
      DEFAULT
      {
        IF (ToUpperCase(siteprofmember.type) NOT IN ["FIXME","TABLE","CATEGORIES"])
          abort(siteprofmember.type); // remove this when certain we support all fields
        xml := xml || '      <!-- ' || siteprofmember.comments || ' -->';
      }
    }

    RETURN xml;
}

STRING FUNCTION GetApplies(RECORD siteprofilesection, STRING baseurl)
{
  IF (CellExists(siteprofilesection, "screen_only") AND siteprofilesection.screen_only = TRUE)
    RETURN "";

  STRING xml;

  BOOLEAN filetype_is_rtd := CellExists(siteprofilesection, "filetype_is_rtd") AND siteprofilesection.filetype_is_rtd = TRUE;

  STRING xmlns_file := baseurl || 'xmlns/filetype/' || GetSiteProfileXMLName(siteprofilesection.name);
  IF (filetype_is_rtd)
    xmlns_file := "http://www.webhare.net/xmlns/publisher/richdocumentfile";

  FOREVERY (RECORD foldertype FROM siteprofilesection.foldertypes)
  {
    STRING xmlns_folder := baseurl || 'xmlns/foldertype/' || GetSiteProfileXMLName(foldertype.title) || 's';

    xml := xml
        || '  <!-- Only allow the ' || (filetype_is_rtd ? "RTD" : "custom") || ' file type in this folder, and run the template -->\n'
        || '  <apply>\n'
        || '    <to type="file" parenttype="' || xmlns_folder || '" />\n'
        || '    <denyfiletype typedef="*" />\n'
        || '    <allowfiletype typedef="' || xmlns_file || '" />\n'
        || '    <bodyrenderer library="' || siteprofilesection.lib || '" objectname="' || GetSiteProfileXMLName(siteprofilesection.name) || 'spage" />\n'
        || '  </apply>\n\n'

        || '  <!-- Extend the interface for non-index files -->\n'
        || '  <apply>\n'
        || '    <to type="file" filetype="' || xmlns_file || '" parenttype="' || xmlns_folder || '" />\n';

    IF (NOT filetype_is_rtd)
      xml := xml || '    <setobjecteditor name="publisher:propertydialog" />\n';

    xml := xml
        || '    <extendproperties name="' || GetSiteProfileXMLName(siteprofilesection.name) || '" />\n'
        || '  </apply>\n\n';
  }

  RETURN xml;
}

PUBLIC STRING FUNCTION GenerateSiteProfileLibrary(STRING baseurl, RECORD siteprofilesection)
{
  STRING title_plural := siteprofilesection.title || "s";
  STRING name := GetSiteProfileXMLName(siteprofilesection.title);
  STRING name_plural := name || "s";
  STRING memberfields_detokenized := Detokenize((SELECT AS STRING ARRAY '"' || members.name || '"' FROM siteprofilesection.members), ", ");

  BOOLEAN filetype_is_rtd := CellExists(siteprofilesection, "filetype_is_rtd") AND siteprofilesection.filetype_is_rtd = TRUE;
  BOOLEAN index_is_rtd := CellExists(siteprofilesection, "index_is_rtd") AND siteprofilesection.index_is_rtd = TRUE;

  STRING ARRAY loadlibs;

  IF (filetype_is_rtd)
    INSERT 'wh::xml/dom.whlib' INTO loadlibs AT END;

  INSERT 'wh::witty.whlib' INTO loadlibs AT END;

  loadlibs := loadlibs CONCAT [ 'module::publisher/webdesign.whlib'
                              , 'module::system/database.whlib'
                              , 'module::system/whfs.whlib'
                              ];

  STRING o := 'PUBLIC OBJECTTYPE ' || title_plural || 'Page EXTEND StaticPageBase\n'
           || '<\n'
           || '  RECORD wittydata;\n'
           || '  BOOLEAN isindex;\n'
           || '\n'
           || '  UPDATE PUBLIC MACRO PrepareForRendering(OBJECT webdesign)\n'
           || '  {\n'
           || '    this->isindex := webdesign->targetfolder->indexdoc = webdesign->targetobject->id;\n'
           || '\n'
           || '     IF (this->isindex)\n'
           || '       this->PrepareForIndex(webdesign);\n'
           || '     ELSE\n'
           || '       this->PrepareForDetails(webdesign);\n'
           || '  }\n'
           || '\n'
           || '  MACRO PrepareForIndex(OBJECT webdesign)\n'
           || '  {\n'
           || '    OBJECT ' || name || 'type := OpenWHFSType("' || baseurl || 'xmlns/filetype/' || name || '");\n';

  IF (filetype_is_rtd)
    o := o || '    OBJECT rtdtype := OpenWHFSType("http://www.webhare.net/xmlns/publisher/richdocumentfile");\n';

  o := o || '\n'
         || '    // collect ' || name_plural || '\n'
         || '    RECORD ARRAY ' || name_plural || ' := \n'
         || '           SELECT id\n'
         || '                , title\n'
         || '                , link := url\n';

  IF (filetype_is_rtd)
    o := o || '                , intro := ""\n';

  o := o || '             FROM system.fs_objects\n'
         || '            WHERE parent = webdesign->targetfolder->id\n'
         || '                  AND type = ' || (filetype_is_rtd ? 'rtd' : name) || 'type->id\n'
         || '                  AND id != webdesign->targetfolder->indexdoc\n'
         || '                  AND title != ""\n'
         || '                  AND indexurl != ""\n'
         || '         ORDER BY ordering, ToUpperCase(title), id;\n'
         || '\n';

  IF (Length(siteprofilesection.members) = 0)
  {
    o := o || '    ' || name_plural || ' := ' || name || 'type->EnrichWithBulkData(' || name_plural || ', [ ' || memberfields_detokenized || ' ]);\n';
  }
  ELSE
  {
    o := o || '    ' || name_plural || ' := SELECT *\n';

    FOREVERY (RECORD siteprofmember FROM siteprofilesection.members)
    {
      SWITCH (siteprofmember.type)
      {
        CASE "datetime"
        {
          IF ('wh::datetime.whlib' NOT IN loadlibs)
            INSERT 'wh::datetime.whlib' INTO loadlibs AT 0;

          //FIXME: Take 'precision' and 'storeutc' into account

          o := o || AddWhiteSpace(Length('    ' || name_plural || ' := SELECT')-1) || ', ' || siteprofmember.name || ' := FormatDateTime("%d-%m-%Y", ' || siteprofmember.name || ')\n';
        }
      }
    }

    o := o || AddWhiteSpace(Length('    ' || name_plural || ' := SELECT')-4) || 'FROM ' || name || 'type->EnrichWithBulkData(' || name_plural || ', [ ' || memberfields_detokenized || ' ]);\n';
  }

  o := o || '\n';

  IF (filetype_is_rtd)
  {
    o := o || '    // add RTD contents\n'
           || '    ' || name_plural || ' := rtdtype->EnrichWithBulkData(' || name_plural || ', [ "data" ]);\n'
           || '\n'
           || '    // generate a plain text version of the RTD for the overview\n'
           || '    FOREVERY (RECORD ' || name || ' FROM ' || name_plural || ')\n'
           || '    {\n'
           || '      IF (RecordExists(' || name || '.data))\n'
           || '      {\n'
           || '        OBJECT doc := MakeXMLDocumentFromHTML(' || name || '.data.htmltext);\n'
           || '        ' || name_plural || '[#' || name || '].intro := doc->body->textcontent;\n'
           || '      }\n'
           || '    }\n'
           || '\n';
  }

  IF (index_is_rtd)
    o := o || '    OBJECT indexpagecontents := webdesign->MakeRTDFromFile(webdesign->targetobject->id);\n\n';

  o := o || '    this->wittydata := [ ' || name_plural || ' := ' || name_plural || '\n';

  IF (index_is_rtd)
    o := o || '                       , body := PTR indexpagecontents->RenderAllObjects()\n';

  o := o || '                       ];\n'
         || '  }\n'
         || '\n'
         || '  MACRO PrepareForDetails(OBJECT webdesign)\n'
         || '  {\n'
         // FIXME: Support for custom cells, like dates and RTEs
         || '    RECORD ' || name || 'data := webdesign->targetobject->GetInstanceData("' || baseurl || 'xmlns/filetype/' || name || '");\n'
         || '\n';

  IF (filetype_is_rtd)
    o := o || '    OBJECT pagecontents := webdesign->MakeRTDFromFile(webdesign->targetobject->id);\n\n';

  o := o || '    this->wittydata := [ ' || name || 'data := ' || name || 'data\n';

  IF (filetype_is_rtd)
    o := o || '                       , body := PTR pagecontents->RenderAllObjects()\n';

  o := o || '                       ];\n'
         || '  }\n'
         || '\n'
         || '  UPDATE PUBLIC MACRO RunBody(OBJECT webdesign)\n'
         || '  {\n'
         || '    EmbedWittyComponent(this->isindex ? "' || name_plural || 'index" : "' || name || 'details", this->wittydata);\n'
         || '  }\n'
         || '>;\n';

  // add <?wh and loadlibs
  STRING startoutput := '<?wh\n';
  FOREVERY (STRING lib FROM loadlibs)
    startoutput := startoutput || 'LOADLIB "' || lib || '";\n';

  o := startoutput || "\n" || o;

  RETURN o;
}

PUBLIC STRING FUNCTION GenerateSiteProfileWitty(RECORD siteprofilesection)
{
  STRING title_plural := siteprofilesection.title || "s";
  STRING name := GetSiteProfileXMLName(siteprofilesection.title);
  STRING name_plural := name || "s";
  STRING memberfields_detokenized := Detokenize((SELECT AS STRING ARRAY '"' || members.name || '"' FROM siteprofilesection.members), ", ");

  BOOLEAN filetype_is_rtd := CellExists(siteprofilesection, "filetype_is_rtd") AND siteprofilesection.filetype_is_rtd = TRUE;
  BOOLEAN index_is_rtd := CellExists(siteprofilesection, "index_is_rtd") AND siteprofilesection.index_is_rtd = TRUE;

  STRING o := '[component ' || name_plural || 'index]\n';

  IF (index_is_rtd)
    o := o || '  RTD body: [body]\n\n';

  o := o || '  [forevery ' || name_plural || ']\n';

  IF (filetype_is_rtd)
    o := o || '    Intro: [intro]<br />\n';

  // FIXME: Print stuff based on member type
  FOREVERY (RECORD siteprofmember FROM siteprofilesection.members)
  {
    o := o || '    ' || siteprofmember.title || ': [' || siteprofmember.name || ']<br />\n'
           || '    <hr />\n';
  }

  o := o || '  [/forevery]\n'
         || '[/component]\n'
         || '\n';

  o := o || '[component ' || name || 'details]\n';

  IF (filetype_is_rtd)
  {
    o := o || '  RTD body: [body]<br />\n';
  }

  FOREVERY (RECORD siteprofmember FROM siteprofilesection.members)
  {
    o := o || '  ' || siteprofmember.title || ': [' || name || 'data.' || siteprofmember.name || ']<br />\n';
  }

  o := o || '[/component]\n';

  RETURN o;
}

STRING FUNCTION AddWhiteSpace(INTEGER numspaces)
{
  STRING text;

  FOR (INTEGER i := 0; i < numspaces; i := i + 1)
    text := text || ' ';

  RETURN text;
}
