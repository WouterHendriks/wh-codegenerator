<?wh
LOADLIB "module::system/configure.whlib";
LOADLIB "module::tollium/screenbase.whlib";
LOADLIB "relative::../siteprofiles.whlib";

PUBLIC OBJECTTYPE Main EXTEND TolliumScreenBase
<
  MACRO Init(RECORD data)
  {
    /* +NAME: 'bedankt'
       +TITLE: 'bedankt'
       +FILETYPES: RECORD ARRAY
        +NAME: 'bedankt'
        +TITLE: 'bedankt'
       +FOLDERTYPES: RECORD ARRAY
        +NAME: 'bedankt'
        +TITLE: 'bedankt'
       +MEMBERS: RECORD ARRAY
        +COMMENTS: '' // so far: Craft specific
        +NAME: 'INLEIDING'
        +REQUIRED: FALSE
        +TITLE: 'Inleiding'
        +TYPE: 'string'
        +MEMBERS: RECORD ARRAY[0] // for arrayedit types
        +OPTIONS: RECORD ARRAY[0] // so far: Craft specific
        +SETTINGS: DEFAULT RECORD // so far: Craft specific
    */
    STRING regsettings := GetRegistryKey(-1, "codegenerator.siteprofiles.settings", "");
    RECORD prefillsettings := regsettings = "" ? DEFAULT RECORD : DecodeHSON(regsettings);

    IF (RecordExists(prefillsettings))
    {
      this->baseurl->value := prefillsettings.baseurl;
      this->itemtitle->value := prefillsettings.itemtitle;
      this->lib->value := prefillsettings.lib;
      this->members->value := SELECT * FROM prefillsettings.members;
      this->use_rtd->value := prefillsettings.use_rtd;

      this->DoGenerateCode();
    }

    this->members->onrowedit := PTR this->DoOpenMembersEditDialog;

    IF ("debug" IN data.params)
    {
      this->members->value := [[ title := "A text", name := "", type := "string", required := FALSE, members := DEFAULT RECORD ARRAY ]
                              ,[ title := "An image", name := "", type := "image", required := TRUE, members := DEFAULT RECORD ARRAY ]
                              ,[ title := "A boolean", name := "", type := "boolean", required := TRUE, members := DEFAULT RECORD ARRAY ]
                              ,[ title := "A richdocument", name := "", type := "richdocument", required := FALSE, members := DEFAULT RECORD ARRAY ]
                              ,[ title := "A whfsref", name := "", type := "whfsref", required := TRUE, members := DEFAULT RECORD ARRAY ]
                              ,[ title := "An array"
                               , name := ""
                               , type := "array"
                               , required := FALSE
                               , members := [[ title := "A text", name := "", type := "string", required := FALSE, members := DEFAULT RECORD ARRAY ]]
                               ]
                              ];
    }

    //this->DoOpenMembersEditDialog(DEFAULT RECORD);
  }

  RECORD FUNCTION DoOpenMembersEditDialog(RECORD row)
  {
    OBJECT dialog := this->LoadScreen(".editmember"
                                    , [ row := row
                                      ]);

    IF (dialog->RunModal() = "ok")
      RETURN dialog->result;

    RETURN DEFAULT RECORD;
  }

  MACRO DoGenerateCode()
  {
    // add some columns that were specific to Craft import, no idea if we'll need this in general functions
    RECORD ARRAY members := SELECT *
                                 , name := (name != "" ? name : GetSiteProfileXMLName(title))
                                 , comments := ""
                                 , options := DEFAULT RECORD ARRAY
                                 , settings := [ types := DEFAULT RECORD ARRAY ]
                                 , members := DEFAULT RECORD ARRAY
                              FROM this->members->value AS mainmembers;

    FOREVERY (RECORD siteprofmember FROM members)
    {
      IF (siteprofmember.type = "array")
      {
        members[#siteprofmember].members := SELECT *
                                                 , name := (name != "" ? name : GetSiteProfileXMLName(title))
                                                 , comments := ""
                                                 , options := DEFAULT RECORD ARRAY
                                              FROM siteprofmember.members;
      }
      ELSE IF (siteprofmember.type = "image")
      {
        members[#siteprofmember].comments := "Image";
      }
    }

    RECORD data := [ name := GetSiteProfileXMLName(this->itemtitle->value)
                   , title := Substitute(this->itemtitle->value, " ", "")
                   , filetypes := [[ title := this->itemtitle->value ]]
                   , foldertypes := [[ title := this->itemtitle->value ]]
                   , members := members
                   , lib := this->lib->value
                   , screen_only := FALSE
                   ];

    IF (this->use_rtd->value = TRUE)
    {
      //data.foldertypes := DEFAULT RECORD ARRAY;
      data.filetypes := DEFAULT RECORD ARRAY;

      INSERT CELL filetype_is_rtd := TRUE INTO data;
    }

    this->GenerateSiteProfileCode(data);
    this->GenerateLibCode(data);
    this->GenerateWittyCode(data);

    this->GenerateScreenOnlyCode(data);
  }

  MACRO GenerateSiteProfileCode(RECORD data)
  {
    this->siteprlcode->value := GenerateSiteProfile(this->baseurl->value, data);
  }

  MACRO GenerateLibCode(RECORD data)
  {
    this->libcode->value := GenerateSiteProfileLibrary(this->baseurl->value, data);
  }

  MACRO GenerateWittyCode(RECORD data)
  {
    this->wittycode->value := GenerateSiteProfileWitty(data);
  }

  MACRO GenerateScreenOnlyCode(RECORD data)
  {
    data.filetypes := DEFAULT RECORD ARRAY;
    data.foldertypes := DEFAULT RECORD ARRAY;
    data.screen_only := TRUE;

    this->screen_siteprlcode->value := GenerateSiteProfile(this->baseurl->value, data);
  }

  MACRO DoSaveSettings()
  {
    // save settings as HSON
    RECORD settings := [ baseurl := this->baseurl->value
                       , itemtitle := this->itemtitle->value
                       , lib := this->lib->value
                       , members := this->members->value
                       , use_rtd := this->use_rtd->value
                       ];

    OBJECT work := this->BeginWork();
    SetRegistryKey(-1, "codegenerator.siteprofiles.settings", EncodeHSON(settings));
    work->Finish();
  }
>;

PUBLIC OBJECTTYPE EditMember EXTEND TolliumScreenBase
<
  PUBLIC RECORD result;

  MACRO Init(RECORD data)
  {
    this->row->value := data.row;
  }

  BOOLEAN FUNCTION Submit()
  {
    OBJECT work := this->BeginWork();

    this->result := this->row->value;

    RETURN work->Finish();
  }


>;

