<?wh
LOADLIB "wh::files.whlib";
LOADLIB "module::system/configure.whlib";
LOADLIB "module::system/internal/moduleimexport.whlib";
LOADLIB "module::tollium/screenbase.whlib";
LOADLIB "module::publisher/siteprofiles.whlib";
LOADLIB "relative::../siteprofiles.whlib";

PUBLIC OBJECTTYPE Main EXTEND TolliumScreenBase
<
  MACRO Init(RECORD data)
  {
    /* +NAME: 'bedankt'
       +TITLE: 'bedankt'
       +FILETYPES: RECORD ARRAY
        +NAME: 'bedankt'
        +TITLE: 'bedankt'
       +FOLDERTYPES: RECORD ARRAY
        +NAME: 'bedankt'
        +TITLE: 'bedankt'
       +MEMBERS: RECORD ARRAY
        +COMMENTS: ''
        +NAME: 'INLEIDING'
        +REQUIRED: FALSE
        +TITLE: 'Inleiding'
        +TYPE: 'string'
        +MEMBERS: RECORD ARRAY[0] // for arrayedit types
        +OPTIONS: RECORD ARRAY[0]
        +SETTINGS: DEFAULT RECORD
    */
    STRING regsettings := GetRegistryKey(-1, "codegenerator.siteprofiles.settings", "");
    RECORD prefillsettings := regsettings = "" ? DEFAULT RECORD : DecodeHSON(regsettings);

    IF (RecordExists(prefillsettings))
    {
      this->baseurl->value := prefillsettings.baseurl;
      this->itemtitle->value := prefillsettings.itemtitle;
      this->lib->value := prefillsettings.lib;
      this->members->value := SELECT * FROM prefillsettings.members;
      this->use_rtd->value := prefillsettings.use_rtd;
      this->index_is_rtd->value := CellExists(prefillsettings, "index_is_rtd") AND prefillsettings.index_is_rtd;

      this->DoGenerateCode();
    }

    this->members->onrowedit := PTR this->DoOpenMembersEditDialog;

    IF ("debug" IN data.params)
    {
      this->members->value := [[ title := "A text", name := "", type := "string", required := FALSE, members := DEFAULT RECORD ARRAY ]
                              ,[ title := "A textarea", name := "", type := "textarea", required := TRUE, members := DEFAULT RECORD ARRAY ]
                              ,[ title := "An image", name := "", type := "image", required := TRUE, members := DEFAULT RECORD ARRAY ]
                              ,[ title := "A date", name := "", type := "datetime", required := TRUE, members := DEFAULT RECORD ARRAY
                               , type_dt_datetimetype := "date"
                               , type_dt_precision := "minutes"
                               , type_dt_storeutc := FALSE
                               ]
                              ,[ title := "A boolean", name := "", type := "boolean", required := TRUE, members := DEFAULT RECORD ARRAY ]
                              ,[ title := "A richdocument", name := "", type := "richdocument", required := FALSE, members := DEFAULT RECORD ARRAY ]
                              ,[ title := "A whfsref", name := "", type := "whfsref", required := TRUE, members := DEFAULT RECORD ARRAY ]
                              ,[ title := "An array", name := "", type := "array", required := FALSE
                               , members := [[ title := "A text", name := "", type := "string", required := FALSE, members := DEFAULT RECORD ARRAY ]
                                            ,[ title := "An image", name := "", type := "image", required := TRUE, members := DEFAULT RECORD ARRAY ]
                                            ,[ title := "A boolean", name := "", type := "boolean", required := TRUE, members := DEFAULT RECORD ARRAY ]
                                            ,[ title := "A richdocument", name := "", type := "richdocument", required := FALSE, members := DEFAULT RECORD ARRAY ]
                                            ,[ title := "A whfsref", name := "", type := "whfsref", required := TRUE, members := DEFAULT RECORD ARRAY ]
                                            ]
                               ]
                              ];
    }
    ELSE IF ("create" IN data.params)
    {
      this->DoCreateTemplate();
    }
  }

  RECORD FUNCTION DoOpenMembersEditDialog(RECORD row)
  {
    OBJECT dialog := this->LoadScreen(".editmember"
                                    , [ row := row
                                      ]);

    IF (dialog->RunModal() = "ok")
      RETURN dialog->result;

    RETURN DEFAULT RECORD;
  }

  MACRO DoGenerateCode()
  {
    RECORD ARRAY members := SELECT *
                                 , name := (name != "" ? name : GetSiteProfileXMLName(title))
                                 , comments := ""
                                 , options := DEFAULT RECORD ARRAY
                                 , settings := [ types := DEFAULT RECORD ARRAY ]
                                 , members := (NOT CellExists(mainmembers,"members") ? DEFAULT RECORD ARRAY : mainmembers.members)
                              FROM this->members->value AS mainmembers;

    FOREVERY (RECORD siteprofmember FROM members)
    {
      IF (siteprofmember.type = "array")
      {
        members[#siteprofmember].members := SELECT *
                                                 , name := (name != "" ? name : GetSiteProfileXMLName(title))
                                                 , comments := ""
                                                 , options := DEFAULT RECORD ARRAY
                                              FROM siteprofmember.members;
      }
    }

    RECORD data := [ name := GetSiteProfileXMLName(this->itemtitle->value)
                   , title := Substitute(this->itemtitle->value, " ", "")
                   , filetypes := [[ title := this->itemtitle->value ]]
                   , foldertypes := [[ title := this->itemtitle->value ]]
                   , members := members
                   , lib := this->lib->value
                   , screen_only := FALSE
                   ];

    IF (this->use_rtd->value = TRUE)
    {
      //data.foldertypes := DEFAULT RECORD ARRAY;
      data.filetypes := DEFAULT RECORD ARRAY;

      INSERT CELL filetype_is_rtd := TRUE INTO data;
    }

    IF (this->index_is_rtd->value = TRUE)
      INSERT CELL index_is_rtd := TRUE INTO data;

    this->GenerateSiteProfileCode(data);
    this->GenerateLibCode(data);
    this->GenerateWittyCode(data);

    this->GenerateScreenOnlyCode(data);
  }

  RECORD FUNCTION ConvertToExpectedData(RECORD data)
  {
    FOREVERY (RECORD siteprofmember FROM data.members)
    {
      SWITCH (siteprofmember.type)
      {
        CASE "array"
        {
          FOREVERY (RECORD mem FROM siteprofmember.members)
            siteprofmember.members[#mem] := this->ApplyConvertToExpectedData(mem);
        }
        DEFAULT
        {
          siteprofmember := this->ApplyConvertToExpectedData(siteprofmember);
        }
      }

      data.members[#siteprofmember] := siteprofmember;
    }

    RETURN data;
  }

  RECORD FUNCTION ApplyConvertToExpectedData(RECORD siteprofmember)
  {
    IF (NOT CellExists(siteprofmember, "settings"))
      siteprofmember := CellInsert(siteprofmember, "settings", DEFAULT RECORD);

    SWITCH (siteprofmember.type)
    {
      CASE "datetime"
      {
        siteprofmember.settings := CellInsert(siteprofmember.settings, "datetype", siteprofmember.type_dt_datetimetype);
        siteprofmember.settings := CellInsert(siteprofmember.settings, "precision", siteprofmember.type_dt_precision);
        siteprofmember.settings := CellInsert(siteprofmember.settings, "storeutc", siteprofmember.type_dt_storeutc);
      }
    }

    RETURN siteprofmember;
  }

  MACRO GenerateSiteProfileCode(RECORD data)
  {
    data := this->ConvertToExpectedData(data);
    this->siteprlcode->value := GenerateSiteProfile(this->baseurl->value, data);
  }

  MACRO GenerateLibCode(RECORD data)
  {
    data := this->ConvertToExpectedData(data);
    this->libcode->value := GenerateSiteProfileLibrary(this->baseurl->value, data);
  }

  MACRO GenerateWittyCode(RECORD data)
  {
    data := this->ConvertToExpectedData(data);
    this->wittycode->value := GenerateSiteProfileWitty(data);
  }

  MACRO GenerateScreenOnlyCode(RECORD data)
  {
    data.filetypes := DEFAULT RECORD ARRAY;
    data.foldertypes := DEFAULT RECORD ARRAY;
    data.screen_only := TRUE;

    data := this->ConvertToExpectedData(data);

    this->screen_siteprlcode->value := GenerateSiteProfile(this->baseurl->value, data);
  }

  MACRO DoSaveSettings()
  {
    // save settings as HSON
    RECORD settings := [ baseurl := this->baseurl->value
                       , itemtitle := this->itemtitle->value
                       , lib := this->lib->value
                       , members := this->members->value
                       , use_rtd := this->use_rtd->value
                       , index_is_rtd := this->index_is_rtd->value
                       ];

    OBJECT work := this->BeginWork();
    SetRegistryKey(-1, "codegenerator.siteprofiles.settings", EncodeHSON(settings));
    work->Finish();
  }

  MACRO DoCreateTemplate()
  {
    OBJECT scr := this->LoadScreen(".createtemplate", [ libcode := this->libcode->value
                                                      , wittycode := this->wittycode->value
                                                      , siteprlcode := this->siteprlcode->value
                                                      , tag := this->lib->value
                                                      ]);

    scr->RunModal();

    scr->LoadScreen(".templatecreated", [ add_js := scr->add_js
                                        , add_siteprl := scr->add_siteprl
                                        ])->RunModal();
  }
>;

PUBLIC OBJECTTYPE EditMember EXTEND TolliumScreenBase
<
  PUBLIC RECORD result;

  MACRO Init(RECORD data)
  {
    this->row->value := data.row;
    this->members->onrowedit := PTR this->DoOpenArrayMembersEditDialog;
  }

  RECORD FUNCTION DoOpenArrayMembersEditDialog(RECORD row)
  {
    OBJECT dialog := this->LoadScreen(".editarraymember"
                                    , [ row := row
                                      ]);

    IF (dialog->RunModal() = "ok")
      RETURN dialog->result;

    RETURN DEFAULT RECORD;
  }

  BOOLEAN FUNCTION Submit()
  {
    OBJECT work := this->BeginWork();
    this->result := this->row->value;
    RETURN work->Finish();
  }
>;

PUBLIC OBJECTTYPE EditArrayMember EXTEND TolliumScreenBase
<
  PUBLIC RECORD result;

  MACRO Init(RECORD data)
  {
    this->row->value := data.row;
  }

  BOOLEAN FUNCTION Submit()
  {
    OBJECT work := this->BeginWork();
    this->result := this->row->value;
    RETURN work->Finish();
  }
>;

PUBLIC OBJECTTYPE CreateTemplate EXTEND TolliumScreenBase
<
  RECORD ARRAY sitedesigns;
  STRING libcode;
  STRING tag;
  STRING wittycode;
  STRING siteprlcode;

  PUBLIC STRING add_js;
  PUBLIC STRING add_siteprl;

  MACRO Init(RECORD data)
  {
    this->libcode := data.libcode;
    this->wittycode := data.wittycode;
    this->siteprlcode := data.siteprlcode;
    this->tag := data.tag;

    // collect webdesigns
    // get module name from cell designroot: 'moduleroot::tollium/webdesigns/webinterface/'
    RECORD ARRAY sitedesigns := SELECT *
                                     , module := Tokenize(Tokenize(designroot, "::")[1], "/")[0]
                                  FROM GetAvailableWebDesigns(FALSE);

    RECORD ARRAY modules := SELECT title := name
                                 , rowkey := name
                                 , webdesigns := DEFAULT RECORD ARRAY
                              FROM GetInstalledModulesOverview(FALSE)
                             WHERE NOT isdeleted
                                   AND NOT isbuiltin
                          ORDER BY ToUpperCase(name);

    FOREVERY (RECORD module FROM modules)
    {
      modules[#module].webdesigns := SELECT title := Substitute(designroot, "moduleroot::" || COLUMN module || "/", "")
                                          , rowkey := designroot
                                       FROM sitedesigns
                                      WHERE ToUpperCase(COLUMN module) = ToUpperCase(module.rowkey)
                                   ORDER BY ToUpperCase(title);
    }

    DELETE FROM modules WHERE length(webdesigns) = 0; // we're not interested in these

    this->module->options := modules;

    this->UpdateExplanation();
  }

  MACRO UpdateExplanation()
  {
    RECORD templatesettings := this->GetTemplateSettings();
    this->explanation->value := GetTid("codegenerator:createtemplate.explanation", this->tag, templatesettings.web_site_design);
  }

  MACRO OnModuleChange()
  {
    RECORD selected_module := SELECT * FROM this->module->options WHERE tolliumselected;

    this->sitedesign->options := selected_module.webdesigns;

    this->sitedesign->readonly := Length(this->sitedesign->options) = 1;

    this->UpdateExplanation();
  }

  RECORD FUNCTION GetTemplateSettings()
  {
    // strip the "webdesigns/SITEDESIGN" part from "moduleroot::MODULE/webdesigns/SITEDESIGN/"
    STRING web_site_design := Substitute(this->sitedesign->value, "moduleroot::" || this->module->value || "/", "");

    // get the sitedesign path (the folder containing the siteprl, package.json, etc)
    RETURN [ web_site_design := web_site_design
           , sitedesign_path := GetModuleInstallationRoot(this->module->value) || web_site_design
           ];
  }

  BOOLEAN FUNCTION Submit()
  {
    RECORD settings := this->GetTemplateSettings();

    // 1) create a folder 'TAG' in src/pages/
    STRING newfolderpath := settings.sitedesign_path || "pages/" || this->tag || "/";
    CreateDiskDirectory(newfolderpath, TRUE);

    // 2) create WHLIB, Witty, SCSS and JS (.es) files in the new folder
    // 2a) WHLIB
    STRING whlib := this->libcode;
    INTEGER addpagenamepos := SearchSubString(ToUpperCase(whlib), "THIS->ISINDEX := WEBDESIGN->TARGETFOLDER->INDEXDOC = WEBDESIGN->TARGETOBJECT->ID");
    IF (addpagenamepos > -1)
    {
      whlib := Left(whlib, addpagenamepos)
            || 'INSERT "page-' || this->tag || '" INTO webdesign->htmlclasses AT END;\n\n    '
            || SubString(whlib, addpagenamepos);
    }

    CreateDiskFileFromBlob(newfolderpath || this->tag || ".whlib", TRUE, FALSE, StringToBlob(whlib));

    // 2b) Witty
    CreateDiskFileFromBlob(newfolderpath || this->tag || ".witty", TRUE, FALSE, StringToBlob(this->wittycode));

    // 2c) SCSS
    STRING scss := "@import '../../shared/variables';\n"
                || "@import '../../shared/mixins';\n";

    CreateDiskFileFromBlob(newfolderpath || this->tag || ".scss", TRUE, FALSE, StringToBlob(scss));

    // 2d) JS
    STRING js := "require('./" || this->tag || ".scss');\n"
              || "\n"
              || "// dompack\n"
              || "import * as dompack from 'dompack';\n"
              || "import { qS, qSA } from 'dompack/extra/qsa';\n"
              || "\n"
              || "dompack.onDomReady(() => {\n"
              || "  if (!document.documentElement.classList.contains('page-" || this->tag || "'))\n"
              || "    return;\n"
              || "\n"
              || "  console.info('page: " || this->tag || "');\n"
              || "});\n";

    CreateDiskFileFromBlob(newfolderpath || this->tag || ".es", TRUE, FALSE, StringToBlob(js));

    // 2e) site profile
    STRING siteprl := '<?xml version="1.0" encoding="UTF-8" ?>\n'
                   || '<siteprofile xmlns="http://www.webhare.net/xmlns/publisher/siteprofile"\n'
                   || '             xmlns:t="http://www.webhare.net/xmlns/tollium/screens"\n'
                   || '             xmlns:p="http://www.webhare.net/xmlns/publisher/components"\n'
                   || '             >\n'
                   || '\n'
                   || this->siteprlcode || '\n'
                   || '\n'
                   || '</siteprofile>\n';

    CreateDiskFileFromBlob(newfolderpath || this->tag || ".siteprl", TRUE, FALSE, StringToBlob(siteprl));

    this->add_js := "import './pages/" || this->tag || "/" || this->tag || ".es';";
    this->add_siteprl := '<applysiteprofile fullpath="pages/' || this->tag || '/' || this->tag || '.siteprl" />';

    RETURN TRUE;
  }
>;

PUBLIC OBJECTTYPE TemplateCreated EXTEND TolliumScreenBase
<
  MACRO Init(RECORD data)
  {
    this->add_js->value := data.add_js;
    this->add_siteprl->value := data.add_siteprl;
  }
>;
